{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { patientAPI, prescriptionAPI, paymentAPI, appointmentAPI } from '../services/api';\n\n// const PatientDashboard = () => {\n//   const [reconsultModal, setReconsultModal] = useState(false);\n//   const [selectedAppointmentForReconsult, setSelectedAppointmentForReconsult] = useState(null);\n//   const [activeSection, setActiveSection] = useState('profile');\n//   const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n//   const [profile, setProfile] = useState({ userId: '', fullName: '', emailId: '', phoneNumber: '', rawPassword: '' });\n//   const [appointments, setAppointments] = useState([]);\n//   const [prescriptions, setPrescriptions] = useState([]);\n//   const [newAppointment, setNewAppointment] = useState({ \n//     specialization: '', \n//     symptoms: [], \n//     additionalSymptoms: '', \n//     preferredDate: '' \n//   });\n//   const [appointmentStats, setAppointmentStats] = useState({ upcoming: 0, pending: 0, completed: 0, cancelled: 0 });\n//   const [filters, setFilters] = useState({ appointments: 'all', prescriptions: 'all', dateRange: '' });\n//   const [search, setSearch] = useState('');\n//   const [selectedAppointment, setSelectedAppointment] = useState(null);\n//   const [selectedPrescription, setSelectedPrescription] = useState(null);\n//   const [rescheduleModal, setRescheduleModal] = useState(false);\n//   const [newDateTime, setNewDateTime] = useState('');\n//   const [refillModal, setRefillModal] = useState(false);\n//   const [followUpModal, setFollowUpModal] = useState(false);\n//   const [preferredDate, setPreferredDate] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [clickedButtons, setClickedButtons] = useState({});  // Added: State to track clicked buttons\n\n//   const symptomOptions = [\n//     'FEVER', 'COUGH', 'HEADACHE', 'CHEST_PAIN', 'NAUSEA', 'SHORTNESS_OF_BREATH', 'FATIGUE', 'OTHER'\n//   ];\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     setLoading(true);\n//     try {\n//       const [profileRes, appointmentsRes, prescriptionsRes] = await Promise.all([\n//         patientAPI.getProfile().catch(() => ({ data: {} })),\n//         patientAPI.getAppointments(),\n//         prescriptionAPI.getPrescriptions().catch(() => ({ data: [] }))\n//       ]);\n//       setProfile({\n//         userId: profileRes.data?.user?.userId || '',\n//         fullName: profileRes.data?.user?.fullName || '',\n//         emailId: profileRes.data?.user?.emailId || '',\n//         phoneNumber: profileRes.data?.user?.phoneNumber || '',\n//         rawPassword: ''\n//       });\n//       setAppointments(appointmentsRes.data || []);\n//       setPrescriptions(prescriptionsRes.data || []);\n//       calculateStats(appointmentsRes.data || []);\n//       console.log('Fetched appointments:', appointmentsRes.data);\n//       console.log('Fetched prescriptions:', prescriptionsRes.data);\n//     } catch (err) {\n//       console.error('Fetch error:', err);\n//       alert('Error fetching data: ' + (err.response?.data?.message || err.message));\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const calculateStats = (apps) => {\n//     const now = new Date();\n//     const upcoming = apps.filter(a => new Date(a.scheduledDateTime) > now && a.status === 'CONFIRMED').length;\n//     const pending = apps.filter(a => a.status === 'PENDING').length;\n//     const completed = apps.filter(a => a.status === 'COMPLETED').length;\n//     const cancelled = apps.filter(a => a.status === 'CANCELLED').length;\n//     setAppointmentStats({ upcoming, pending, completed, cancelled });\n//   };\n\n//   const updateProfile = async () => {\n//     console.log('Update Profile button clicked');\n//     try {\n//       const payload = {\n//         fullName: profile.fullName || null,\n//         emailId: profile.emailId || null,\n//         phoneNumber: profile.phoneNumber || null,\n//         rawPassword: profile.rawPassword || null\n//       };\n//       await patientAPI.updateProfile(payload);\n//       alert('Profile updated successfully!');\n//       fetchData();\n//     } catch (err) {\n//       console.error('Profile update error:', err);\n//       alert('Error updating profile: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const createReconsult = async (originalAppointmentId) => {\n//     try {\n//       await appointmentAPI.createReconsult(originalAppointmentId);\n//       alert('Reconsult scheduled successfully!');\n//       fetchData();\n//       setReconsultModal(false);\n//     } catch (err) {\n//       alert('Error scheduling reconsult: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const initiatePayment = async () => {\n//     console.log('Pay Now button clicked');\n//     try {\n//       const paymentPayload = {\n//         specialization: newAppointment.specialization,\n//         symptoms: newAppointment.symptoms.join(','),\n//         additionalSymptoms: newAppointment.additionalSymptoms,\n//         preferredDate: new Date(newAppointment.preferredDate).toISOString().split('T')[0]\n//       };\n//       const response = await paymentAPI.initiate(paymentPayload);\n//       const { orderId, amount, currency, patientId } = response.data;\n//       const options = {\n//         key: 'rzp_test_RVcBsWaU6E63ug',\n//         amount: amount,\n//         currency: currency,\n//         order_id: orderId,\n//         name: 'MediCare Appointment',\n//         description: 'Appointment Booking',\n//         handler: async (response) => {\n//           const confirmPayload = {\n//             orderId: response.razorpay_order_id,\n//             paymentId: response.razorpay_payment_id,\n//             signature: response.razorpay_signature,\n//             method: 'CARD',\n//             specialization: newAppointment.specialization,\n//             symptoms: newAppointment.symptoms,\n//             additionalSymptoms: newAppointment.additionalSymptoms,\n//             preferredDate: newAppointment.preferredDate\n//           };\n//           try {\n//             await appointmentAPI.confirmAfterPayment(confirmPayload);\n//             alert('Appointment booked successfully after payment!');\n//             setNewAppointment({ specialization: '', symptoms: [], additionalSymptoms: '', preferredDate: '' });\n//             fetchData();\n//           } catch (err) {\n//             console.error('Confirmation error:', err);\n//             alert('Payment successful, but appointment confirmation failed: ' + (err.response?.data?.message || err.message));\n//           }\n//         },\n//         prefill: {\n//           name: profile.fullName,\n//           email: profile.emailId,\n//           contact: profile.phoneNumber\n//         },\n//         theme: {\n//           color: '#3399cc'\n//         }\n//       };\n//       const rzp = new window.Razorpay(options);\n//       rzp.open();\n//     } catch (err) {\n//       console.error('Payment initiation error:', err);\n//       alert('Oops, something went wrong. Payment failed: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const cancelAppointment = async (id) => {\n//     if (window.confirm('Are you sure you want to cancel this appointment?')) {\n//       try {\n//         await appointmentAPI.cancel(id);\n//         alert('Appointment cancelled successfully!');\n//         fetchData();\n//       } catch (err) {\n//         alert('Error cancelling appointment: ' + (err.response?.data?.message || err.message));\n//       }\n//     }\n//   };\n\n//   const rescheduleAppointment = async () => {\n//     try {\n//       await appointmentAPI.reschedule(selectedAppointment.appointmentId, { newRequestedDateTime: newDateTime });\n//       alert('Appointment rescheduled successfully!');\n//       setRescheduleModal(false);\n//       fetchData();\n//     } catch (err) {\n//       alert('Error rescheduling appointment: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const downloadPdf = async (prescriptionId) => {\n//     console.log('Download PDF button clicked for prescription ID:', prescriptionId);\n//     try {\n//       const response = await prescriptionAPI.downloadPdf(prescriptionId);\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', `prescription_${prescriptionId}.pdf`);\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (err) {\n//       console.error('Download PDF error:', err);\n//       alert('Error downloading PDF: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const printPrescription = (prescription) => {\n//     console.log('Print button clicked, prescription data:', prescription);  // Added: Log to check if advice is null in frontend\n//     const printWindow = window.open('', '_blank');\n//     printWindow.document.write(`\n//       <html>\n//         <head><title>Prescription</title></head>\n//         <body>\n//           <h1>Prescription Details</h1>\n//           <p><strong>Patient:</strong> ${profile.fullName}</p>\n//           <p><strong>Diagnosis:</strong> ${prescription.diagnosis}</p>\n//           <p><strong>Medications:</strong></p>\n//           <ul>\n//             ${prescription.medicines?.map(med => `<li>${med.name} - ${med.dosage} - ${med.frequency} - ${med.duration} days</li>`).join('')}\n//           </ul>\n//           <p><strong>Advice:</strong> ${prescription.advice || 'No advice provided'}</p>\n//         </body>\n//       </html>\n//     `);\n//     printWindow.document.close();\n//     printWindow.print();\n//   };\n\n//   const requestRefill = async (prescriptionId) => {\n//     console.log('Request Refill button clicked for prescription ID:', prescriptionId);\n//     try {\n//       await prescriptionAPI.requestRefill(prescriptionId);\n//       alert('Refill requested successfully!');\n//     } catch (err) {\n//       console.error('Request Refill error:', err);\n//       alert('Error requesting refill: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const bookFollowUp = async (prescriptionId) => {\n//     console.log('Book Follow-up Confirm button clicked for prescription ID:', prescriptionId);\n//     try {\n//       await prescriptionAPI.bookFollowUp(prescriptionId, { preferredDate });\n//       alert('Follow-up booked successfully!');\n//       setFollowUpModal(false);\n//       setPreferredDate('');\n//       fetchData();\n//     } catch (err) {\n//       console.error('Book Follow-up error:', err);\n//       alert('Error booking follow-up: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const filteredAppointments = appointments.filter(a => {\n//     const matchesStatus = filters.appointments === 'all' || a.status.toLowerCase() === filters.appointments;\n//     const matchesSearch = a.doctor?.fullName?.toLowerCase().includes(search.toLowerCase()) || a.specialization?.toLowerCase().includes(search.toLowerCase());\n//     return matchesStatus && matchesSearch;\n//   });\n\n//   const filteredPrescriptions = prescriptions.filter(p => {\n//     const matchesStatus = filters.prescriptions === 'all' || (p.status || 'ACTIVE').toLowerCase() === filters.prescriptions;\n//     const matchesSearch = p.doctor?.fullName?.toLowerCase().includes(search.toLowerCase()) || (p.specialization || '').toLowerCase().includes(search.toLowerCase());\n//     return matchesStatus && matchesSearch;\n//   });\n\n//   console.log('Filtered prescriptions:', filteredPrescriptions);  // Added: Debug filtered data\n\n//   const tableStyle = { width: '100%', borderCollapse: 'collapse', marginTop: '1rem', fontSize: '0.9rem' };\n//   const thStyle = { border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'left' };\n//   const tdStyle = { border: '1px solid #ddd', padding: '12px' };\n//   const buttonStyle = { padding: '6px 12px', margin: '2px', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '0.8rem' };\n\n//   const getSidebarButtonStyle = (isActive) => ({\n\n//     background: 'none',\n//     border: 'none',\n//     color: 'black',\n//     cursor: 'pointer',\n//     fontWeight: isActive ? 'bold' : 'normal'\n//   });\n\n//   const getActionButtonStyle = (buttonKey) => ({\n//     ...buttonStyle,\n//     background: clickedButtons[buttonKey] ? 'lightgreen' : 'green',\n//     color: 'black'\n//   });\n\n//   return (\n//     <div style={{ display: 'flex', fontFamily: 'Poppins, sans-serif', background: '#f4f8fb', minHeight: '100vh' }}>\n//       <div style={{ width: sidebarCollapsed ? '0' : '250px', background: 'white', color: 'black', padding: '1rem', transition: 'width 0.3s', overflow: 'hidden' }}>\n//         <button onClick={() => { console.log('Sidebar toggle clicked'); setSidebarCollapsed(!sidebarCollapsed); }} style={{ background: 'none', border: 'none', color: 'black', fontSize: '1.5rem', cursor: 'pointer' }}>\n//           ☰\n//         </button>\n//         <h2>Patient Menu</h2>\n//         <ul style={{ listStyle: 'none', padding: 0 }}>\n//           <li><button onClick={() => { console.log('Profile section clicked'); setActiveSection('profile'); }} style={getSidebarButtonStyle(activeSection === 'profile')}>Update Profile</button></li>\n//           <li><button onClick={() => { console.log('Book Appointment section clicked'); setActiveSection('bookAppointment'); }} style={getSidebarButtonStyle(activeSection === 'bookAppointment')}>Book Appointment</button></li>\n//           <li><button onClick={() => { console.log('Appointments section clicked'); setActiveSection('appointments'); }} style={getSidebarButtonStyle(activeSection === 'appointments')}>Your Appointments</button></li>\n//           <li><button onClick={() => { console.log('Prescriptions section clicked'); setActiveSection('prescriptions'); }} style={getSidebarButtonStyle(activeSection === 'prescriptions')}>Your Prescriptions</button></li>\n//         </ul>\n//       </div>\n//       <div style={{ flex: 1, padding: '2rem', display: 'flex', flexDirection: 'column' }}>\n//         {loading && <p>Loading...</p>}\n//         <div style={{ display: activeSection === 'profile' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Update Profile</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); updateProfile(); }}>\n//               <input type=\"text\" placeholder=\"Full Name\" value={profile.fullName || ''} onChange={(e) => setProfile({ ...profile, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"email\" placeholder=\"Email\" value={profile.emailId || ''} onChange={(e) => setProfile({ ...profile, emailId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"text\" placeholder=\"Phone\" value={profile.phoneNumber || ''} onChange={(e) => setProfile({ ...profile, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Password\" value={profile.rawPassword || ''} onChange={(e) => setProfile({ ...profile, rawPassword: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Update Profile</button>\n//             </form>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'bookAppointment' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Book Appointment</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); initiatePayment(); }}>\n//               <select value={newAppointment.specialization} onChange={(e) => setNewAppointment({ ...newAppointment, specialization: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\n//                 <option value=\"\">Select Specialization</option>\n//                 <option value=\"CARDIOLOGIST\">Cardiologist</option>\n//                 <option value=\"ORTHOPEDIC\">Orthopedic</option>\n//                 <option value=\"DENTIST\">Dentist</option>\n//                 <option value=\"GYNAECOLOGIST\">Gynaecologist</option>\n//                 <option value=\"NEUROLOGIST\">Neurologist</option>\n//                 <option value=\"GASTROENTEROLOGIST\">Gastroenterologist</option>\n//                 <option value=\"PEDIATRICS\">Pediatrics</option>\n//                 <option value=\"RADIOLOGY\">Radiology</option>\n//                 <option value=\"GENERAL_PHYSICIAN\">General Physician</option>\n//                 <option value=\"OTOLARYNGOLOGIST_ENT\">Otolaryngologist ENT</option>\n//                 <option value=\"ENDOCRINOLOGIST\">Endocrinologist</option>\n//                 <option value=\"ONCOLOGY\">Oncology</option>\n//               </select>\n//               <label>Symptoms (Select one or more):</label>\n//               <div style={{ display: 'flex', flexWrap: 'wrap', margin: '10px 0' }}>\n//                 {symptomOptions.map(symptom => (\n//                   <label key={symptom} style={{ margin: '5px', display: 'flex', alignItems: 'center' }}>\n//                     <input\n//                       type=\"checkbox\"\n//                       value={symptom}\n//                       checked={newAppointment.symptoms.includes(symptom)}\n//                       onChange={(e) => {\n//                         const { value, checked } = e.target;\n//                         setNewAppointment(prev => ({\n//                           ...prev,\n//                           symptoms: checked ? [...prev.symptoms, value] : prev.symptoms.filter(s => s !== value)\n//                         }));\n//                       }}\n//                     />\n//                     {symptom.replace('_', ' ')}\n//                   </label>\n//                 ))}\n//               </div>\n//               <input type=\"text\" placeholder=\"Additional Symptoms\" value={newAppointment.additionalSymptoms} onChange={(e) => setNewAppointment({ ...newAppointment, additionalSymptoms: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"datetime-local\" value={newAppointment.preferredDate} onChange={(e) => setNewAppointment({ ...newAppointment, preferredDate: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Pay Now (₹500)</button>\n//             </form>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'appointments' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1, flexDirection: 'column' }}>\n//           <div style={{ display: 'flex', justifyContent: 'space-around', marginBottom: '2rem' }}>\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>🗓️ Upcoming: {appointmentStats.upcoming}</div>\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>⏳ Pending: {appointmentStats.pending}</div>\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>✅ Completed: {appointmentStats.completed}</div>\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>❌ Cancelled: {appointmentStats.cancelled}</div>\n//           </div>\n//           <div style={{ display: 'flex', marginBottom: '1rem' }}>\n//             <input type=\"text\" placeholder=\"Search by doctor or department\" value={search} onChange={(e) => setSearch(e.target.value)} style={{ flex: 1, padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <select value={filters.appointments} onChange={(e) => setFilters({ ...filters, appointments: e.target.value })} style={{ marginLeft: '1rem', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"all\">All Status</option>\n//               <option value=\"pending\">Pending</option>\n//               <option value=\"confirmed\">Confirmed</option>\n//               <option value=\"completed\">Completed</option>\n//               <option value=\"cancelled\">Cancelled</option>\n//             </select>\n//           </div>\n//           <table style={tableStyle}>\n//             <thead>\n//               <tr>\n//                 <th style={thStyle}>Appointment ID</th>\n//                 {/* <th style={thStyle}>Doctor Name</th> */}\n//                 <th style={thStyle}>Specialization</th>\n//                 <th style={thStyle}>Date & Time</th>\n//                 <th style={thStyle}>Status</th>\n//                 <th style={thStyle}>Booking Date</th>\n//                 <th style={thStyle}>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {filteredAppointments.map((a, index) => (\n//                 <tr key={a.appointmentId} style={index % 2 === 0 ? {} : { backgroundColor: '#f9f9f9' }}>\n//                   <td style={tdStyle}>{a.appointmentId}</td>\n//                   {/* <td style={tdStyle}>{a.doctor?.fullName || 'Not Assigned'}</td> */}\n//                   <td style={tdStyle}>{a.specialization || 'N/A'}</td>\n//                   <td style={tdStyle}>{a.scheduledDateTime || a.preferredDate || 'N/A'}</td>\n//                   <td style={tdStyle}>\n//                     <span style={{\n//                       color: a.status === 'CONFIRMED' ? 'green' : a.status === 'PENDING' ? 'orange' : a.status === 'COMPLETED' ? 'blue' : 'red',\n//                       fontWeight: 'bold'\n//                     }}>\n//                       {a.status}\n//                     </span>\n//                   </td>\n//                   <td style={tdStyle}>{a.createdAt}</td>\n//                   <td style={tdStyle}>\n//                     <button style={{ ...getActionButtonStyle(`view-${a.appointmentId}`), background: '#17a2b8', color: 'white' }} onClick={() => { console.log('View Details clicked'); setSelectedAppointment(a); setClickedButtons(prev => ({ ...prev, [`view-${a.appointmentId}`]: true })); }}>View Details</button>\n//                     <button style={getActionButtonStyle(`cancel-${a.appointmentId}`)} onClick={() => { cancelAppointment(a.appointmentId); setClickedButtons(prev => ({ ...prev, [`cancel-${a.appointmentId}`]: true })); }}>Cancel</button>\n//                     {a.status === 'COMPLETED' && (\n//                       <button style={getActionButtonStyle(`reconsult-${a.appointmentId}`)} onClick={() => { setSelectedAppointmentForReconsult(a); setReconsultModal(true); setClickedButtons(prev => ({ ...prev, [`reconsult-${a.appointmentId}`]: true })); }}>Schedule Reconsult</button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//           {selectedAppointment && (\n//             <div style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '8px' }}>\n//               <h4>Appointment Details</h4>\n//               <p><strong>Appointment ID:</strong> {selectedAppointment.appointmentId}</p>\n//               <p><strong>Doctor:</strong> {selectedAppointment.doctor?.fullName}</p>\n//               <p><strong>Specialization:</strong> {selectedAppointment.specialization}</p>\n//               <p><strong>Status:</strong> {selectedAppointment.status}</p>\n//               <p><strong>Scheduled Date/Time:</strong> {selectedAppointment.scheduledDateTime}</p>\n//               <p><strong>Symptoms:</strong> {selectedAppointment.symptoms}</p>\n//               <p><strong>Additional Symptoms:</strong> {selectedAppointment.additionalSymptoms}</p>\n//               <p><strong>Preferred Date:</strong> {selectedAppointment.preferredDate}</p>\n//               <p><strong>Fee:</strong> ₹{selectedAppointment.fee}</p>\n//               <p><strong>Meeting Link:</strong> <a href={selectedAppointment.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{selectedAppointment.meetingLink}</a></p>\n//             </div>\n//           )}\n//         </div>\n//         <div style={{ display: activeSection === 'prescriptions' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1, flexDirection: 'column' }}>\n//           <div style={{ display: 'flex', marginBottom: '1rem' }}>\n//             <input type=\"text\" placeholder=\"Search by doctor or department\" value={search} onChange={(e) => setSearch(e.target.value)} style={{ flex: 1, padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <select value={filters.prescriptions} onChange={(e) => setFilters({ ...filters, prescriptions: e.target.value })} style={{ marginLeft: '1rem', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"all\">All Status</option>\n//               <option value=\"active\">Active</option>\n//               <option value=\"expired\">Expired</option>\n//             </select>\n//             <button onClick={fetchData} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginLeft: '1rem' }}>Refresh</button>\n//           </div>\n//           <table style={tableStyle}>\n//             <thead>\n//               <tr>\n//                 <th style={thStyle}>Prescription ID</th>\n//                 {/* <th style={thStyle}>Doctor Name</th>\n//                 <th style={thStyle}>Specialization</th>\n//                 <th style={thStyle}>Appointment Date</th> */}\n//                 <th style={thStyle}>Prescription Date</th>\n//                 <th style={thStyle}>Status</th>\n//                 <th style={thStyle}>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {(() => {\n//                 console.log('Filtered prescriptions data:', filteredPrescriptions);\n//                 return filteredPrescriptions.length > 0 ? filteredPrescriptions.map((p, index) => (\n//                   <tr key={p.prescriptionId} style={index % 2 === 0 ? {} : { backgroundColor: '#f9f9f9' }}>\n//                     <td style={tdStyle}>{p.prescriptionId}</td>\n//                     {/* <td style={tdStyle}>{p.doctor?.fullName || p.doctorName || 'Not Assigned'}</td>\n//                     <td style={tdStyle}>{p.doctor?.specialization || p.specialization || 'N/A'}</td>\n//                     <td style={tdStyle}>{p.appointmentDate || 'N/A'}</td> */}\n//                     <td style={tdStyle}>{p.issuedAt}</td>\n//                     <td style={tdStyle}>\n//                       <span style={{ color: (p.status || 'ACTIVE') === 'ACTIVE' ? 'green' : 'red', fontWeight: 'bold' }}>\n//                         {p.status || 'ACTIVE'}\n//                       </span>\n//                     </td>\n//                     <td style={tdStyle}>\n//                       <button style={{ ...getActionButtonStyle(`view-${p.prescriptionId}`), background: '#17a2b8', color: 'white' }} onClick={() => { console.log('View Prescription clicked'); setSelectedPrescription(p); setClickedButtons(prev => ({ ...prev, [`view-${p.prescriptionId}`]: true })); }}>View</button>\n//                       <button style={getActionButtonStyle(`download-${p.prescriptionId}`)} onClick={() => { downloadPdf(p.prescriptionId); setClickedButtons(prev => ({ ...prev, [`download-${p.prescriptionId}`]: true })); }}>Download PDF</button>\n//                       <button style={getActionButtonStyle(`print-${p.prescriptionId}`)} onClick={() => { printPrescription(p); setClickedButtons(prev => ({ ...prev, [`print-${p.prescriptionId}`]: true })); }}>Print</button>\n//                       <button style={getActionButtonStyle(`refill-${p.prescriptionId}`)} onClick={() => { requestRefill(p.prescriptionId); setClickedButtons(prev => ({ ...prev, [`refill-${p.prescriptionId}`]: true })); }}>Request Refill</button>\n//                       <button style={getActionButtonStyle(`followup-${p.prescriptionId}`)} onClick={() => { console.log('Book Follow-up clicked'); setSelectedPrescription(p); setFollowUpModal(true); setClickedButtons(prev => ({ ...prev, [`followup-${p.prescriptionId}`]: true })); }}>Book Follow-up</button>\n//                     </td>\n//                   </tr>\n//                 )) : (\n//                   <tr>\n//                     <td colSpan=\"7\" style={{ textAlign: 'center', padding: '20px' }}>No prescriptions found. Try refreshing or check if prescriptions have been added.</td>\n//                   </tr>\n//                 );\n//               })()}\n//             </tbody>\n//           </table>\n//           {selectedPrescription && (\n//             <div style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '8px' }}>\n//               <h4>Prescription Details</h4>\n//               <p><strong>Patient:</strong> {profile.fullName} (ID: {profile.userId})</p>\n//               <p><strong>Diagnosis:</strong> {selectedPrescription.diagnosis}</p>\n//               <p><strong>Medications:</strong></p>\n//               <ul>\n//                 {selectedPrescription.medicines?.length > 0 ? selectedPrescription.medicines.map((med, idx) => (\n//                   <li key={idx}>{med.name} - {med.dosage} - {med.frequency} - {med.duration} days - Notes: {med.notes}</li>\n//                 )) : <li>No medications listed.</li>}\n//               </ul>\n//               <p><strong>Advice:</strong> {selectedPrescription.advice}</p>\n//             </div>\n//           )}\n//         </div>\n//         {reconsultModal && (\n//           <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\n//             <h3>Schedule Reconsult</h3>\n//             <p>Appointment ID: {selectedAppointmentForReconsult?.appointmentId}</p>\n//             <p>Doctor: {selectedAppointmentForReconsult?.doctor?.fullName}</p>\n//             <p>This will create a new reconsult request for this completed appointment.</p>\n//             <button onClick={() => createReconsult(selectedAppointmentForReconsult.appointmentId)} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\n//             <button onClick={() => setReconsultModal(false)} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\n//           </div>\n//         )}\n//         {rescheduleModal && (\n//           <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\n//             <h3>Reschedule Appointment</h3>\n//             <p>Doctor: {selectedAppointment?.doctor?.fullName}</p>\n//             <p>Current Date/Time: {selectedAppointment?.scheduledDateTime}</p>\n//             <input type=\"datetime-local\" value={newDateTime} onChange={(e) => setNewDateTime(e.target.value)} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <button onClick={rescheduleAppointment} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\n//             <button onClick={() => { console.log('Reschedule Cancel clicked'); setRescheduleModal(false); }} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\n//           </div>\n//         )}\n//         {followUpModal && (\n//           <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\n//             <h3>Book Follow-up</h3>\n//             <p>Prescription ID: {selectedPrescription?.prescriptionId}</p>\n//             <input type=\"datetime-local\" value={preferredDate} onChange={(e) => setPreferredDate(e.target.value)} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <button onClick={() => bookFollowUp(selectedPrescription.prescriptionId)} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\n//             <button onClick={() => { console.log('Follow-up Cancel clicked'); setFollowUpModal(false); }} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PatientDashboard;","map":{"version":3,"names":[],"sources":["/Users/poojav/Desktop/MediCareOnline/FrontendMediCare/src/components/PatientDashBoard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { patientAPI, prescriptionAPI, paymentAPI, appointmentAPI } from '../services/api';\r\n\r\n// const PatientDashboard = () => {\r\n//   const [reconsultModal, setReconsultModal] = useState(false);\r\n//   const [selectedAppointmentForReconsult, setSelectedAppointmentForReconsult] = useState(null);\r\n//   const [activeSection, setActiveSection] = useState('profile');\r\n//   const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\r\n//   const [profile, setProfile] = useState({ userId: '', fullName: '', emailId: '', phoneNumber: '', rawPassword: '' });\r\n//   const [appointments, setAppointments] = useState([]);\r\n//   const [prescriptions, setPrescriptions] = useState([]);\r\n//   const [newAppointment, setNewAppointment] = useState({ \r\n//     specialization: '', \r\n//     symptoms: [], \r\n//     additionalSymptoms: '', \r\n//     preferredDate: '' \r\n//   });\r\n//   const [appointmentStats, setAppointmentStats] = useState({ upcoming: 0, pending: 0, completed: 0, cancelled: 0 });\r\n//   const [filters, setFilters] = useState({ appointments: 'all', prescriptions: 'all', dateRange: '' });\r\n//   const [search, setSearch] = useState('');\r\n//   const [selectedAppointment, setSelectedAppointment] = useState(null);\r\n//   const [selectedPrescription, setSelectedPrescription] = useState(null);\r\n//   const [rescheduleModal, setRescheduleModal] = useState(false);\r\n//   const [newDateTime, setNewDateTime] = useState('');\r\n//   const [refillModal, setRefillModal] = useState(false);\r\n//   const [followUpModal, setFollowUpModal] = useState(false);\r\n//   const [preferredDate, setPreferredDate] = useState('');\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [clickedButtons, setClickedButtons] = useState({});  // Added: State to track clicked buttons\r\n\r\n//   const symptomOptions = [\r\n//     'FEVER', 'COUGH', 'HEADACHE', 'CHEST_PAIN', 'NAUSEA', 'SHORTNESS_OF_BREATH', 'FATIGUE', 'OTHER'\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const fetchData = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const [profileRes, appointmentsRes, prescriptionsRes] = await Promise.all([\r\n//         patientAPI.getProfile().catch(() => ({ data: {} })),\r\n//         patientAPI.getAppointments(),\r\n//         prescriptionAPI.getPrescriptions().catch(() => ({ data: [] }))\r\n//       ]);\r\n//       setProfile({\r\n//         userId: profileRes.data?.user?.userId || '',\r\n//         fullName: profileRes.data?.user?.fullName || '',\r\n//         emailId: profileRes.data?.user?.emailId || '',\r\n//         phoneNumber: profileRes.data?.user?.phoneNumber || '',\r\n//         rawPassword: ''\r\n//       });\r\n//       setAppointments(appointmentsRes.data || []);\r\n//       setPrescriptions(prescriptionsRes.data || []);\r\n//       calculateStats(appointmentsRes.data || []);\r\n//       console.log('Fetched appointments:', appointmentsRes.data);\r\n//       console.log('Fetched prescriptions:', prescriptionsRes.data);\r\n//     } catch (err) {\r\n//       console.error('Fetch error:', err);\r\n//       alert('Error fetching data: ' + (err.response?.data?.message || err.message));\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const calculateStats = (apps) => {\r\n//     const now = new Date();\r\n//     const upcoming = apps.filter(a => new Date(a.scheduledDateTime) > now && a.status === 'CONFIRMED').length;\r\n//     const pending = apps.filter(a => a.status === 'PENDING').length;\r\n//     const completed = apps.filter(a => a.status === 'COMPLETED').length;\r\n//     const cancelled = apps.filter(a => a.status === 'CANCELLED').length;\r\n//     setAppointmentStats({ upcoming, pending, completed, cancelled });\r\n//   };\r\n\r\n//   const updateProfile = async () => {\r\n//     console.log('Update Profile button clicked');\r\n//     try {\r\n//       const payload = {\r\n//         fullName: profile.fullName || null,\r\n//         emailId: profile.emailId || null,\r\n//         phoneNumber: profile.phoneNumber || null,\r\n//         rawPassword: profile.rawPassword || null\r\n//       };\r\n//       await patientAPI.updateProfile(payload);\r\n//       alert('Profile updated successfully!');\r\n//       fetchData();\r\n//     } catch (err) {\r\n//       console.error('Profile update error:', err);\r\n//       alert('Error updating profile: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const createReconsult = async (originalAppointmentId) => {\r\n//     try {\r\n//       await appointmentAPI.createReconsult(originalAppointmentId);\r\n//       alert('Reconsult scheduled successfully!');\r\n//       fetchData();\r\n//       setReconsultModal(false);\r\n//     } catch (err) {\r\n//       alert('Error scheduling reconsult: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const initiatePayment = async () => {\r\n//     console.log('Pay Now button clicked');\r\n//     try {\r\n//       const paymentPayload = {\r\n//         specialization: newAppointment.specialization,\r\n//         symptoms: newAppointment.symptoms.join(','),\r\n//         additionalSymptoms: newAppointment.additionalSymptoms,\r\n//         preferredDate: new Date(newAppointment.preferredDate).toISOString().split('T')[0]\r\n//       };\r\n//       const response = await paymentAPI.initiate(paymentPayload);\r\n//       const { orderId, amount, currency, patientId } = response.data;\r\n//       const options = {\r\n//         key: 'rzp_test_RVcBsWaU6E63ug',\r\n//         amount: amount,\r\n//         currency: currency,\r\n//         order_id: orderId,\r\n//         name: 'MediCare Appointment',\r\n//         description: 'Appointment Booking',\r\n//         handler: async (response) => {\r\n//           const confirmPayload = {\r\n//             orderId: response.razorpay_order_id,\r\n//             paymentId: response.razorpay_payment_id,\r\n//             signature: response.razorpay_signature,\r\n//             method: 'CARD',\r\n//             specialization: newAppointment.specialization,\r\n//             symptoms: newAppointment.symptoms,\r\n//             additionalSymptoms: newAppointment.additionalSymptoms,\r\n//             preferredDate: newAppointment.preferredDate\r\n//           };\r\n//           try {\r\n//             await appointmentAPI.confirmAfterPayment(confirmPayload);\r\n//             alert('Appointment booked successfully after payment!');\r\n//             setNewAppointment({ specialization: '', symptoms: [], additionalSymptoms: '', preferredDate: '' });\r\n//             fetchData();\r\n//           } catch (err) {\r\n//             console.error('Confirmation error:', err);\r\n//             alert('Payment successful, but appointment confirmation failed: ' + (err.response?.data?.message || err.message));\r\n//           }\r\n//         },\r\n//         prefill: {\r\n//           name: profile.fullName,\r\n//           email: profile.emailId,\r\n//           contact: profile.phoneNumber\r\n//         },\r\n//         theme: {\r\n//           color: '#3399cc'\r\n//         }\r\n//       };\r\n//       const rzp = new window.Razorpay(options);\r\n//       rzp.open();\r\n//     } catch (err) {\r\n//       console.error('Payment initiation error:', err);\r\n//       alert('Oops, something went wrong. Payment failed: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const cancelAppointment = async (id) => {\r\n//     if (window.confirm('Are you sure you want to cancel this appointment?')) {\r\n//       try {\r\n//         await appointmentAPI.cancel(id);\r\n//         alert('Appointment cancelled successfully!');\r\n//         fetchData();\r\n//       } catch (err) {\r\n//         alert('Error cancelling appointment: ' + (err.response?.data?.message || err.message));\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const rescheduleAppointment = async () => {\r\n//     try {\r\n//       await appointmentAPI.reschedule(selectedAppointment.appointmentId, { newRequestedDateTime: newDateTime });\r\n//       alert('Appointment rescheduled successfully!');\r\n//       setRescheduleModal(false);\r\n//       fetchData();\r\n//     } catch (err) {\r\n//       alert('Error rescheduling appointment: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const downloadPdf = async (prescriptionId) => {\r\n//     console.log('Download PDF button clicked for prescription ID:', prescriptionId);\r\n//     try {\r\n//       const response = await prescriptionAPI.downloadPdf(prescriptionId);\r\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n//       const link = document.createElement('a');\r\n//       link.href = url;\r\n//       link.setAttribute('download', `prescription_${prescriptionId}.pdf`);\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//     } catch (err) {\r\n//       console.error('Download PDF error:', err);\r\n//       alert('Error downloading PDF: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const printPrescription = (prescription) => {\r\n//     console.log('Print button clicked, prescription data:', prescription);  // Added: Log to check if advice is null in frontend\r\n//     const printWindow = window.open('', '_blank');\r\n//     printWindow.document.write(`\r\n//       <html>\r\n//         <head><title>Prescription</title></head>\r\n//         <body>\r\n//           <h1>Prescription Details</h1>\r\n//           <p><strong>Patient:</strong> ${profile.fullName}</p>\r\n//           <p><strong>Diagnosis:</strong> ${prescription.diagnosis}</p>\r\n//           <p><strong>Medications:</strong></p>\r\n//           <ul>\r\n//             ${prescription.medicines?.map(med => `<li>${med.name} - ${med.dosage} - ${med.frequency} - ${med.duration} days</li>`).join('')}\r\n//           </ul>\r\n//           <p><strong>Advice:</strong> ${prescription.advice || 'No advice provided'}</p>\r\n//         </body>\r\n//       </html>\r\n//     `);\r\n//     printWindow.document.close();\r\n//     printWindow.print();\r\n//   };\r\n\r\n//   const requestRefill = async (prescriptionId) => {\r\n//     console.log('Request Refill button clicked for prescription ID:', prescriptionId);\r\n//     try {\r\n//       await prescriptionAPI.requestRefill(prescriptionId);\r\n//       alert('Refill requested successfully!');\r\n//     } catch (err) {\r\n//       console.error('Request Refill error:', err);\r\n//       alert('Error requesting refill: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const bookFollowUp = async (prescriptionId) => {\r\n//     console.log('Book Follow-up Confirm button clicked for prescription ID:', prescriptionId);\r\n//     try {\r\n//       await prescriptionAPI.bookFollowUp(prescriptionId, { preferredDate });\r\n//       alert('Follow-up booked successfully!');\r\n//       setFollowUpModal(false);\r\n//       setPreferredDate('');\r\n//       fetchData();\r\n//     } catch (err) {\r\n//       console.error('Book Follow-up error:', err);\r\n//       alert('Error booking follow-up: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const filteredAppointments = appointments.filter(a => {\r\n//     const matchesStatus = filters.appointments === 'all' || a.status.toLowerCase() === filters.appointments;\r\n//     const matchesSearch = a.doctor?.fullName?.toLowerCase().includes(search.toLowerCase()) || a.specialization?.toLowerCase().includes(search.toLowerCase());\r\n//     return matchesStatus && matchesSearch;\r\n//   });\r\n\r\n//   const filteredPrescriptions = prescriptions.filter(p => {\r\n//     const matchesStatus = filters.prescriptions === 'all' || (p.status || 'ACTIVE').toLowerCase() === filters.prescriptions;\r\n//     const matchesSearch = p.doctor?.fullName?.toLowerCase().includes(search.toLowerCase()) || (p.specialization || '').toLowerCase().includes(search.toLowerCase());\r\n//     return matchesStatus && matchesSearch;\r\n//   });\r\n\r\n//   console.log('Filtered prescriptions:', filteredPrescriptions);  // Added: Debug filtered data\r\n\r\n//   const tableStyle = { width: '100%', borderCollapse: 'collapse', marginTop: '1rem', fontSize: '0.9rem' };\r\n//   const thStyle = { border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'left' };\r\n//   const tdStyle = { border: '1px solid #ddd', padding: '12px' };\r\n//   const buttonStyle = { padding: '6px 12px', margin: '2px', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '0.8rem' };\r\n\r\n//   const getSidebarButtonStyle = (isActive) => ({\r\n    \r\n//     background: 'none',\r\n//     border: 'none',\r\n//     color: 'black',\r\n//     cursor: 'pointer',\r\n//     fontWeight: isActive ? 'bold' : 'normal'\r\n//   });\r\n\r\n//   const getActionButtonStyle = (buttonKey) => ({\r\n//     ...buttonStyle,\r\n//     background: clickedButtons[buttonKey] ? 'lightgreen' : 'green',\r\n//     color: 'black'\r\n//   });\r\n\r\n//   return (\r\n//     <div style={{ display: 'flex', fontFamily: 'Poppins, sans-serif', background: '#f4f8fb', minHeight: '100vh' }}>\r\n//       <div style={{ width: sidebarCollapsed ? '0' : '250px', background: 'white', color: 'black', padding: '1rem', transition: 'width 0.3s', overflow: 'hidden' }}>\r\n//         <button onClick={() => { console.log('Sidebar toggle clicked'); setSidebarCollapsed(!sidebarCollapsed); }} style={{ background: 'none', border: 'none', color: 'black', fontSize: '1.5rem', cursor: 'pointer' }}>\r\n//           ☰\r\n//         </button>\r\n//         <h2>Patient Menu</h2>\r\n//         <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//           <li><button onClick={() => { console.log('Profile section clicked'); setActiveSection('profile'); }} style={getSidebarButtonStyle(activeSection === 'profile')}>Update Profile</button></li>\r\n//           <li><button onClick={() => { console.log('Book Appointment section clicked'); setActiveSection('bookAppointment'); }} style={getSidebarButtonStyle(activeSection === 'bookAppointment')}>Book Appointment</button></li>\r\n//           <li><button onClick={() => { console.log('Appointments section clicked'); setActiveSection('appointments'); }} style={getSidebarButtonStyle(activeSection === 'appointments')}>Your Appointments</button></li>\r\n//           <li><button onClick={() => { console.log('Prescriptions section clicked'); setActiveSection('prescriptions'); }} style={getSidebarButtonStyle(activeSection === 'prescriptions')}>Your Prescriptions</button></li>\r\n//         </ul>\r\n//       </div>\r\n//       <div style={{ flex: 1, padding: '2rem', display: 'flex', flexDirection: 'column' }}>\r\n//         {loading && <p>Loading...</p>}\r\n//         <div style={{ display: activeSection === 'profile' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Update Profile</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); updateProfile(); }}>\r\n//               <input type=\"text\" placeholder=\"Full Name\" value={profile.fullName || ''} onChange={(e) => setProfile({ ...profile, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"email\" placeholder=\"Email\" value={profile.emailId || ''} onChange={(e) => setProfile({ ...profile, emailId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"text\" placeholder=\"Phone\" value={profile.phoneNumber || ''} onChange={(e) => setProfile({ ...profile, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Password\" value={profile.rawPassword || ''} onChange={(e) => setProfile({ ...profile, rawPassword: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Update Profile</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'bookAppointment' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Book Appointment</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); initiatePayment(); }}>\r\n//               <select value={newAppointment.specialization} onChange={(e) => setNewAppointment({ ...newAppointment, specialization: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//                 <option value=\"\">Select Specialization</option>\r\n//                 <option value=\"CARDIOLOGIST\">Cardiologist</option>\r\n//                 <option value=\"ORTHOPEDIC\">Orthopedic</option>\r\n//                 <option value=\"DENTIST\">Dentist</option>\r\n//                 <option value=\"GYNAECOLOGIST\">Gynaecologist</option>\r\n//                 <option value=\"NEUROLOGIST\">Neurologist</option>\r\n//                 <option value=\"GASTROENTEROLOGIST\">Gastroenterologist</option>\r\n//                 <option value=\"PEDIATRICS\">Pediatrics</option>\r\n//                 <option value=\"RADIOLOGY\">Radiology</option>\r\n//                 <option value=\"GENERAL_PHYSICIAN\">General Physician</option>\r\n//                 <option value=\"OTOLARYNGOLOGIST_ENT\">Otolaryngologist ENT</option>\r\n//                 <option value=\"ENDOCRINOLOGIST\">Endocrinologist</option>\r\n//                 <option value=\"ONCOLOGY\">Oncology</option>\r\n//               </select>\r\n//               <label>Symptoms (Select one or more):</label>\r\n//               <div style={{ display: 'flex', flexWrap: 'wrap', margin: '10px 0' }}>\r\n//                 {symptomOptions.map(symptom => (\r\n//                   <label key={symptom} style={{ margin: '5px', display: 'flex', alignItems: 'center' }}>\r\n//                     <input\r\n//                       type=\"checkbox\"\r\n//                       value={symptom}\r\n//                       checked={newAppointment.symptoms.includes(symptom)}\r\n//                       onChange={(e) => {\r\n//                         const { value, checked } = e.target;\r\n//                         setNewAppointment(prev => ({\r\n//                           ...prev,\r\n//                           symptoms: checked ? [...prev.symptoms, value] : prev.symptoms.filter(s => s !== value)\r\n//                         }));\r\n//                       }}\r\n//                     />\r\n//                     {symptom.replace('_', ' ')}\r\n//                   </label>\r\n//                 ))}\r\n//               </div>\r\n//               <input type=\"text\" placeholder=\"Additional Symptoms\" value={newAppointment.additionalSymptoms} onChange={(e) => setNewAppointment({ ...newAppointment, additionalSymptoms: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"datetime-local\" value={newAppointment.preferredDate} onChange={(e) => setNewAppointment({ ...newAppointment, preferredDate: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Pay Now (₹500)</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'appointments' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1, flexDirection: 'column' }}>\r\n//           <div style={{ display: 'flex', justifyContent: 'space-around', marginBottom: '2rem' }}>\r\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>🗓️ Upcoming: {appointmentStats.upcoming}</div>\r\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>⏳ Pending: {appointmentStats.pending}</div>\r\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>✅ Completed: {appointmentStats.completed}</div>\r\n//             <div style={{ textAlign: 'center', padding: '1rem', background: '#e9ecef', borderRadius: '8px' }}>❌ Cancelled: {appointmentStats.cancelled}</div>\r\n//           </div>\r\n//           <div style={{ display: 'flex', marginBottom: '1rem' }}>\r\n//             <input type=\"text\" placeholder=\"Search by doctor or department\" value={search} onChange={(e) => setSearch(e.target.value)} style={{ flex: 1, padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <select value={filters.appointments} onChange={(e) => setFilters({ ...filters, appointments: e.target.value })} style={{ marginLeft: '1rem', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"all\">All Status</option>\r\n//               <option value=\"pending\">Pending</option>\r\n//               <option value=\"confirmed\">Confirmed</option>\r\n//               <option value=\"completed\">Completed</option>\r\n//               <option value=\"cancelled\">Cancelled</option>\r\n//             </select>\r\n//           </div>\r\n//           <table style={tableStyle}>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th style={thStyle}>Appointment ID</th>\r\n//                 {/* <th style={thStyle}>Doctor Name</th> */}\r\n//                 <th style={thStyle}>Specialization</th>\r\n//                 <th style={thStyle}>Date & Time</th>\r\n//                 <th style={thStyle}>Status</th>\r\n//                 <th style={thStyle}>Booking Date</th>\r\n//                 <th style={thStyle}>Actions</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {filteredAppointments.map((a, index) => (\r\n//                 <tr key={a.appointmentId} style={index % 2 === 0 ? {} : { backgroundColor: '#f9f9f9' }}>\r\n//                   <td style={tdStyle}>{a.appointmentId}</td>\r\n//                   {/* <td style={tdStyle}>{a.doctor?.fullName || 'Not Assigned'}</td> */}\r\n//                   <td style={tdStyle}>{a.specialization || 'N/A'}</td>\r\n//                   <td style={tdStyle}>{a.scheduledDateTime || a.preferredDate || 'N/A'}</td>\r\n//                   <td style={tdStyle}>\r\n//                     <span style={{\r\n//                       color: a.status === 'CONFIRMED' ? 'green' : a.status === 'PENDING' ? 'orange' : a.status === 'COMPLETED' ? 'blue' : 'red',\r\n//                       fontWeight: 'bold'\r\n//                     }}>\r\n//                       {a.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td style={tdStyle}>{a.createdAt}</td>\r\n//                   <td style={tdStyle}>\r\n//                     <button style={{ ...getActionButtonStyle(`view-${a.appointmentId}`), background: '#17a2b8', color: 'white' }} onClick={() => { console.log('View Details clicked'); setSelectedAppointment(a); setClickedButtons(prev => ({ ...prev, [`view-${a.appointmentId}`]: true })); }}>View Details</button>\r\n//                     <button style={getActionButtonStyle(`cancel-${a.appointmentId}`)} onClick={() => { cancelAppointment(a.appointmentId); setClickedButtons(prev => ({ ...prev, [`cancel-${a.appointmentId}`]: true })); }}>Cancel</button>\r\n//                     {a.status === 'COMPLETED' && (\r\n//                       <button style={getActionButtonStyle(`reconsult-${a.appointmentId}`)} onClick={() => { setSelectedAppointmentForReconsult(a); setReconsultModal(true); setClickedButtons(prev => ({ ...prev, [`reconsult-${a.appointmentId}`]: true })); }}>Schedule Reconsult</button>\r\n//                     )}\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//           {selectedAppointment && (\r\n//             <div style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '8px' }}>\r\n//               <h4>Appointment Details</h4>\r\n//               <p><strong>Appointment ID:</strong> {selectedAppointment.appointmentId}</p>\r\n//               <p><strong>Doctor:</strong> {selectedAppointment.doctor?.fullName}</p>\r\n//               <p><strong>Specialization:</strong> {selectedAppointment.specialization}</p>\r\n//               <p><strong>Status:</strong> {selectedAppointment.status}</p>\r\n//               <p><strong>Scheduled Date/Time:</strong> {selectedAppointment.scheduledDateTime}</p>\r\n//               <p><strong>Symptoms:</strong> {selectedAppointment.symptoms}</p>\r\n//               <p><strong>Additional Symptoms:</strong> {selectedAppointment.additionalSymptoms}</p>\r\n//               <p><strong>Preferred Date:</strong> {selectedAppointment.preferredDate}</p>\r\n//               <p><strong>Fee:</strong> ₹{selectedAppointment.fee}</p>\r\n//               <p><strong>Meeting Link:</strong> <a href={selectedAppointment.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{selectedAppointment.meetingLink}</a></p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'prescriptions' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1, flexDirection: 'column' }}>\r\n//           <div style={{ display: 'flex', marginBottom: '1rem' }}>\r\n//             <input type=\"text\" placeholder=\"Search by doctor or department\" value={search} onChange={(e) => setSearch(e.target.value)} style={{ flex: 1, padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <select value={filters.prescriptions} onChange={(e) => setFilters({ ...filters, prescriptions: e.target.value })} style={{ marginLeft: '1rem', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"all\">All Status</option>\r\n//               <option value=\"active\">Active</option>\r\n//               <option value=\"expired\">Expired</option>\r\n//             </select>\r\n//             <button onClick={fetchData} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginLeft: '1rem' }}>Refresh</button>\r\n//           </div>\r\n//           <table style={tableStyle}>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th style={thStyle}>Prescription ID</th>\r\n//                 {/* <th style={thStyle}>Doctor Name</th>\r\n//                 <th style={thStyle}>Specialization</th>\r\n//                 <th style={thStyle}>Appointment Date</th> */}\r\n//                 <th style={thStyle}>Prescription Date</th>\r\n//                 <th style={thStyle}>Status</th>\r\n//                 <th style={thStyle}>Actions</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {(() => {\r\n//                 console.log('Filtered prescriptions data:', filteredPrescriptions);\r\n//                 return filteredPrescriptions.length > 0 ? filteredPrescriptions.map((p, index) => (\r\n//                   <tr key={p.prescriptionId} style={index % 2 === 0 ? {} : { backgroundColor: '#f9f9f9' }}>\r\n//                     <td style={tdStyle}>{p.prescriptionId}</td>\r\n//                     {/* <td style={tdStyle}>{p.doctor?.fullName || p.doctorName || 'Not Assigned'}</td>\r\n//                     <td style={tdStyle}>{p.doctor?.specialization || p.specialization || 'N/A'}</td>\r\n//                     <td style={tdStyle}>{p.appointmentDate || 'N/A'}</td> */}\r\n//                     <td style={tdStyle}>{p.issuedAt}</td>\r\n//                     <td style={tdStyle}>\r\n//                       <span style={{ color: (p.status || 'ACTIVE') === 'ACTIVE' ? 'green' : 'red', fontWeight: 'bold' }}>\r\n//                         {p.status || 'ACTIVE'}\r\n//                       </span>\r\n//                     </td>\r\n//                     <td style={tdStyle}>\r\n//                       <button style={{ ...getActionButtonStyle(`view-${p.prescriptionId}`), background: '#17a2b8', color: 'white' }} onClick={() => { console.log('View Prescription clicked'); setSelectedPrescription(p); setClickedButtons(prev => ({ ...prev, [`view-${p.prescriptionId}`]: true })); }}>View</button>\r\n//                       <button style={getActionButtonStyle(`download-${p.prescriptionId}`)} onClick={() => { downloadPdf(p.prescriptionId); setClickedButtons(prev => ({ ...prev, [`download-${p.prescriptionId}`]: true })); }}>Download PDF</button>\r\n//                       <button style={getActionButtonStyle(`print-${p.prescriptionId}`)} onClick={() => { printPrescription(p); setClickedButtons(prev => ({ ...prev, [`print-${p.prescriptionId}`]: true })); }}>Print</button>\r\n//                       <button style={getActionButtonStyle(`refill-${p.prescriptionId}`)} onClick={() => { requestRefill(p.prescriptionId); setClickedButtons(prev => ({ ...prev, [`refill-${p.prescriptionId}`]: true })); }}>Request Refill</button>\r\n//                       <button style={getActionButtonStyle(`followup-${p.prescriptionId}`)} onClick={() => { console.log('Book Follow-up clicked'); setSelectedPrescription(p); setFollowUpModal(true); setClickedButtons(prev => ({ ...prev, [`followup-${p.prescriptionId}`]: true })); }}>Book Follow-up</button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 )) : (\r\n//                   <tr>\r\n//                     <td colSpan=\"7\" style={{ textAlign: 'center', padding: '20px' }}>No prescriptions found. Try refreshing or check if prescriptions have been added.</td>\r\n//                   </tr>\r\n//                 );\r\n//               })()}\r\n//             </tbody>\r\n//           </table>\r\n//           {selectedPrescription && (\r\n//             <div style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '8px' }}>\r\n//               <h4>Prescription Details</h4>\r\n//               <p><strong>Patient:</strong> {profile.fullName} (ID: {profile.userId})</p>\r\n//               <p><strong>Diagnosis:</strong> {selectedPrescription.diagnosis}</p>\r\n//               <p><strong>Medications:</strong></p>\r\n//               <ul>\r\n//                 {selectedPrescription.medicines?.length > 0 ? selectedPrescription.medicines.map((med, idx) => (\r\n//                   <li key={idx}>{med.name} - {med.dosage} - {med.frequency} - {med.duration} days - Notes: {med.notes}</li>\r\n//                 )) : <li>No medications listed.</li>}\r\n//               </ul>\r\n//               <p><strong>Advice:</strong> {selectedPrescription.advice}</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         {reconsultModal && (\r\n//           <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\r\n//             <h3>Schedule Reconsult</h3>\r\n//             <p>Appointment ID: {selectedAppointmentForReconsult?.appointmentId}</p>\r\n//             <p>Doctor: {selectedAppointmentForReconsult?.doctor?.fullName}</p>\r\n//             <p>This will create a new reconsult request for this completed appointment.</p>\r\n//             <button onClick={() => createReconsult(selectedAppointmentForReconsult.appointmentId)} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\r\n//             <button onClick={() => setReconsultModal(false)} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\r\n//           </div>\r\n//         )}\r\n//         {rescheduleModal && (\r\n//           <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\r\n//             <h3>Reschedule Appointment</h3>\r\n//             <p>Doctor: {selectedAppointment?.doctor?.fullName}</p>\r\n//             <p>Current Date/Time: {selectedAppointment?.scheduledDateTime}</p>\r\n//             <input type=\"datetime-local\" value={newDateTime} onChange={(e) => setNewDateTime(e.target.value)} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <button onClick={rescheduleAppointment} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\r\n//             <button onClick={() => { console.log('Reschedule Cancel clicked'); setRescheduleModal(false); }} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\r\n//           </div>\r\n//         )}\r\n//         {followUpModal && (\r\n//           <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\r\n//             <h3>Book Follow-up</h3>\r\n//             <p>Prescription ID: {selectedPrescription?.prescriptionId}</p>\r\n//             <input type=\"datetime-local\" value={preferredDate} onChange={(e) => setPreferredDate(e.target.value)} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <button onClick={() => bookFollowUp(selectedPrescription.prescriptionId)} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\r\n//             <button onClick={() => { console.log('Follow-up Cancel clicked'); setFollowUpModal(false); }} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PatientDashboard;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { adminAPI } from '../services/api';\n\n// const AdminDashboard = () => {\n//   const [activeSection, setActiveSection] = useState('doctors');\n//   const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n//   const [doctors, setDoctors] = useState([]);\n//   const [patients, setPatients] = useState([]);\n//   const [admins, setAdmins] = useState([]);\n//   const [allAppointments, setAllAppointments] = useState([]);  // Combined list for all appointments\n//   const [newDoctor, setNewDoctor] = useState({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', specialization: '', qualification: '', experienceYears: '' });\n//   const [newPatient, setNewPatient] = useState({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', gender: '', dateOfBirth: '' });\n//   const [newAdmin, setNewAdmin] = useState({ fullName: '', email: '', phoneNumber: '', rawPassword: '', confirmPassword: '', superAdmin: false });\n//   const [reassignData, setReassignData] = useState({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });\n//   const [rescheduleData, setRescheduleData] = useState({ appointmentId: '', newRequestedDateTime: '', reason: '' });\n//   const [filters, setFilters] = useState({ doctors: 'all', patients: 'all', admins: 'all', appointments: 'all' });  // Added appointments filter\n//   const [loading, setLoading] = useState(false);\n//   const [showApproveModal, setShowApproveModal] = useState(false);\n//   const [approveData, setApproveData] = useState({ appointmentId: '', doctorUserId: '', requestedDateTime: '' });\n//   const [showRescheduleModal, setShowRescheduleModal] = useState(false);  // For cancelled appointments\n//   const [rescheduleModalData, setRescheduleModalData] = useState({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });  // For cancelled\n//   const [showPendingRescheduleModal, setShowPendingRescheduleModal] = useState(false);  // For pending appointments\n//   const [pendingRescheduleData, setPendingRescheduleData] = useState({ appointmentId: '', newRequestedDateTime: '', reason: '' });  // For pending\n//   const [error, setError] = useState('');\n//   const [selectedAppointment, setSelectedAppointment] = useState(null);\n//      const [newDateTime, setNewDateTime] = useState('');\n//      const [rescheduleModal, setRescheduleModal] = useState(false);\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     setLoading(true);\n//     try {\n//       const [d, p, a, appts] = await Promise.all([\n//         adminAPI.getDoctors(),\n//         adminAPI.getPatients(),\n//         adminAPI.getAdmins(),\n//         adminAPI.getAllAppointments()  // New: Fetch all appointments\n//       ]);\n//       setDoctors(d.data || []);\n//       setPatients(p.data || []);\n//       setAdmins(a.data || []);\n//       setAllAppointments(appts.data || []);\n\n//       console.log('Fetched doctors:', d.data);\n//       console.log('Fetched patients:', p.data);\n//       console.log('Fetched admins:', a.data);\n//       console.log('Fetched all appointments:', appts.data);\n//     } catch (err) {\n//       console.error('Fetch error details:', err);\n//       alert('Error fetching data: ' + (err.response?.data?.message || err.message));\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const createDoctor = async () => {\n//     console.log('Create Doctor button clicked');\n//     if (newDoctor.rawPassword !== newDoctor.confirmPassword) {\n//       alert('Passwords do not match');\n//       return;\n//     }\n//     try {\n//       await adminAPI.createDoctor(newDoctor);\n//       setNewDoctor({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', specialization: '', qualification: '', experienceYears: '' });\n//       fetchData();\n//       alert('Doctor created successfully!');\n//     } catch (err) {\n//       alert('Error creating doctor: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const createPatient = async () => {\n//     console.log('Create Patient button clicked');\n//     if (newPatient.rawPassword !== newPatient.confirmPassword) {\n//       alert('Passwords do not match');\n//       return;\n//     }\n//     try {\n//       await adminAPI.createPatient(newPatient);\n//       setNewPatient({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', gender: '', dateOfBirth: '' });\n//       fetchData();\n//       alert('Patient created successfully!');\n//     } catch (err) {\n//       alert('Error creating patient: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const createAdmin = async () => {\n//     console.log('Create Admin button clicked');\n//     if (newAdmin.rawPassword !== newAdmin.confirmPassword) {\n//       alert('Passwords do not match');\n//       return;\n//     }\n//     try {\n//       await adminAPI.createAdmin(newAdmin);\n//       setNewAdmin({ fullName: '', email: '', phoneNumber: '', rawPassword: '', confirmPassword: '', superAdmin: false });\n//       fetchData();\n//       alert('Admin created successfully!');\n//     } catch (err) {\n//       alert('Error creating admin: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const approveDoctor = async (id) => {\n//     console.log('Approve Doctor button clicked for ID:', id);\n//     try {\n//       await adminAPI.approveDoctor(id);\n//       fetchData();\n//       alert('Doctor approved!');\n//     } catch (err) {\n//       alert('Error approving doctor: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const blockUser = async (id, status) => {\n//     console.log('Block User button clicked for ID:', id, 'Status:', status);\n//     try {\n//       await adminAPI.blockUser(id, status);\n//       fetchData();\n//       alert('User status updated!');\n//     } catch (err) {\n//       alert('Error updating user status: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const handleApprove = (appointmentId) => {\n//     console.log('Approve Appointment button clicked for ID:', appointmentId);\n//     const now = new Date();\n//     const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\n//     nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\n//     if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\n//     if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\n//     setApproveData({ appointmentId, doctorUserId: '', requestedDateTime: nextHour.toISOString().slice(0, 16) });\n//     setShowApproveModal(true);\n//   };\n\n//   const submitApprove = async () => {\n//     const { appointmentId, doctorUserId, requestedDateTime } = approveData;\n//     if (!doctorUserId || !requestedDateTime) {\n//       setError('Please select a doctor and date/time.');\n//       return;\n//     }\n//     const doctorExists = doctors.some(d => d.userId == doctorUserId);\n//     if (!doctorExists) {\n//       setError('Invalid Doctor ID. Please select from the list.');\n//       return;\n//     }\n//     const dt = new Date(requestedDateTime);\n//     const now = new Date();\n//     if (dt <= now) {\n//       setError('Date/time must be in the future.');\n//       return;\n//     }\n//     const hours = dt.getHours();\n//     const minutes = dt.getMinutes();\n//     if (hours < 9 || hours >= 17 || (hours === 12 && minutes >= 0) || (hours === 13 && minutes < 60)) {\n//       setError('Slot outside working hours. Working hours: 9:00 AM - 5:00 PM, excluding lunch 12:00-1:00 PM.');\n//       return;\n//     }\n//     if (minutes % 20 !== 0) {\n//       setError('Slot must align to 20-minute boundary (e.g., 09:00, 09:20).');\n//       return;\n//     }\n//     try {\n//       await adminAPI.approveAppointment(appointmentId, { doctorUserId: parseInt(doctorUserId), requestedDateTime });\n//       setShowApproveModal(false);\n//       setApproveData({ appointmentId: '', doctorUserId: '', requestedDateTime: '' });\n//       setError('');\n//       fetchData();\n//       alert('Appointment approved!');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error approving appointment: ' + err.message);\n//     }\n//   };\n\n//   const cancelAppointment = async (id) => {\n//     console.log('Cancel Appointment button clicked for ID:', id);\n//     const reason = prompt('Enter cancellation reason:');\n//     if (!reason) return;\n//     try {\n//       await adminAPI.cancelAppointment(id, { reason });\n//       fetchData();\n//       alert('Appointment cancelled!');\n//     } catch (err) {\n//       alert('Error cancelling appointment: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const viewDetails = (appointment) => {\n//     console.log('View Details button clicked for appointment:', appointment.appointmentId);\n//     alert('Appointment Details:\\n' + JSON.stringify(appointment, null, 2));\n//   };\n\n//   // const rescheduleAppointment = async () => {\n//   //   try {\n//   //     // UPDATED: Pass appointmentId as path param, and data as body\n//   //     await adminAPI.rescheduleAppointment(rescheduleData.appointmentId, {\n//   //       newRequestedDateTime: rescheduleData.newRequestedDateTime,\n//   //       reason: rescheduleData.reason\n//   //     });\n//   //     setRescheduleData({ appointmentId: '', newRequestedDateTime: '', reason: '' });\n//   //     fetchData();\n//   //     alert('Appointment rescheduled successfully!');\n//   //   } catch (err) {\n//   //     alert('Error rescheduling appointment: ' + (err.response?.data?.message || err.message));\n//   //   }\n//   // };\n\n//   const rescheduleCancelled = async (appointmentId) => {\n//     console.log('Re-schedule Cancelled button clicked for ID:', appointmentId);\n//     const now = new Date();\n//     const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\n//     nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\n//     if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\n//     if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\n//     // NEW: Set selectedAppointment to the current appointment for modal display\n//     const appt = allAppointments.find(a => a.appointmentId === appointmentId);\n//     setSelectedAppointment(appt);\n//     setRescheduleModalData({ appointmentId, newDoctorUserId: '', requestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\n//     setShowRescheduleModal(true);\n//   };\n//   const reschedulePending = async (appointmentId) => {\n//     console.log('Reschedule Pending button clicked for ID:', appointmentId);\n//     const now = new Date();\n//     const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\n//     nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\n//     if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\n//     if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\n//     // NEW: Set selectedAppointment\n//     const appt = allAppointments.find(a => a.appointmentId === appointmentId);\n//     setSelectedAppointment(appt);\n//     setPendingRescheduleData({ appointmentId, newRequestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\n//     setShowPendingRescheduleModal(true);\n//   };\n//   const rescheduleAppointment = async () => {\n//     try {\n//       // UPDATED: Use rescheduleData instead of  variables\n//       await adminAPI.rescheduleAppointment(rescheduleData.appointmentId, {\n//         newRequestedDateTime: rescheduleData.newRequestedDateTime,\n//         reason: rescheduleData.reason\n//       });\n//       setRescheduleData({ appointmentId: '', newRequestedDateTime: '', reason: '' });\n//       fetchData();\n//       alert('Appointment rescheduled successfully!');\n//     } catch (err) {\n//       alert('Error rescheduling: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const reassignAppointment = async () => {\n//     try {\n//       // UPDATED: Pass appointmentId as path param, and data as body\n//       await adminAPI.reassignAppointment(reassignData.appointmentId, {\n//         newDoctorUserId: reassignData.newDoctorUserId,\n//         requestedDateTime: reassignData.requestedDateTime,\n//         reason: reassignData.reason\n//       });\n//       setReassignData({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });\n//       fetchData();\n//       alert('Appointment reassigned successfully!');\n//     } catch (err) {\n//       alert('Error reassigning appointment: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   // const rescheduleCancelled = async (appointmentId) => {\n//   //   console.log('Re-schedule Cancelled button clicked for ID:', appointmentId);\n//   //   const now = new Date();\n//   //   const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\n//   //   nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\n//   //   if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\n//   //   if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\n//   //   setRescheduleModalData({ appointmentId, newDoctorUserId: '', requestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\n//   //   setShowRescheduleModal(true);\n//   // };\n\n//   const submitReschedule = async () => {\n//     const { appointmentId, newDoctorUserId, requestedDateTime, reason } = rescheduleModalData;\n//     if (!newDoctorUserId || !requestedDateTime) {\n//       setError('Please select a doctor and date/time.');\n//       return;\n//     }\n//     const doctorExists = doctors.some(d => d.userId == newDoctorUserId);\n//     if (!doctorExists) {\n//       setError('Invalid Doctor ID. Please select from the list.');\n//       return;\n//     }\n//     const dt = new Date(requestedDateTime);\n//     const now = new Date();\n//     if (dt <= now) {\n//       setError('Date/time must be in the future.');\n//       return;\n//     }\n//     const hours = dt.getHours();\n//     const minutes = dt.getMinutes();\n//     if (hours < 9 || hours >= 17 || (hours === 12 && minutes >= 0) || (hours === 13 && minutes < 60)) {\n//       setError('Slot outside working hours. Working hours: 9:00 AM - 5:00 PM, excluding lunch 12:00-1:00 PM.');\n//       return;\n//     }\n//     if (minutes % 20 !== 0) {\n//       setError('Slot must align to 20-minute boundary (e.g., 09:00, 09:20).');\n//       return;\n//     }\n//     try {\n//       await adminAPI.reassignAppointment({ appointmentId: parseInt(appointmentId), newDoctorUserId: parseInt(newDoctorUserId), requestedDateTime, reason });\n//       setShowRescheduleModal(false);\n//       setRescheduleModalData({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });\n//       setError('');\n//       fetchData();\n//       alert('Appointment rescheduled!');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error rescheduling appointment: ' + err.message);\n//     }\n//   };\n\n//   // const reschedulePending = async (appointmentId) => {\n//   //   console.log('Reschedule Pending button clicked for ID:', appointmentId);\n//   //   const now = new Date();\n//   //   const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\n//   //   nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\n//   //   if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\n//   //   if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\n//   //   setPendingRescheduleData({ appointmentId, newRequestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\n//   //   setShowPendingRescheduleModal(true);\n//   // };\n\n//   const submitPendingReschedule = async () => {\n//     const { appointmentId, newRequestedDateTime, reason } = pendingRescheduleData;\n//     if (!newRequestedDateTime) {\n//       setError('Please select a date/time.');\n//       return;\n//     }\n//     const dt = new Date(newRequestedDateTime);\n//     const now = new Date();\n//     if (dt <= now) {\n//       setError('Date/time must be in the future.');\n//       return;\n//     }\n//     const hours = dt.getHours();\n//     const minutes = dt.getMinutes();\n//     if (hours < 9 || hours >= 17 || (hours === 12 && minutes >= 0) || (hours === 13 && minutes < 60)) {\n//       setError('Slot outside working hours.');\n//       return;\n//     }\n//     if (minutes % 20 !== 0) {\n//       setError('Slot must align to 20-minute boundary.');\n//       return;\n//     }\n//     try {\n//       await adminAPI.rescheduleAppointment({ appointmentId: parseInt(appointmentId), newRequestedDateTime, reason });\n//       setShowPendingRescheduleModal(false);\n//       setPendingRescheduleData({ appointmentId: '', newRequestedDateTime: '', reason: '' });\n//       setError('');\n//       fetchData();\n//       alert('Appointment rescheduled!');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error rescheduling appointment: ' + err.message);\n//     }\n//   };\n\n//   const archiveAppointment = async (id) => {\n//     try {\n//       await adminAPI.archiveAppointment(id);\n//       fetchData();\n//       alert('Appointment archived!');\n//     } catch (err) {\n//       alert('Error archiving appointment: ' + (err.response?.data?.message || err.message));\n//     }\n//   };\n\n//   const filteredDoctors = doctors.filter(d => filters.doctors === 'all' || d.status.toLowerCase() === filters.doctors);\n//   const filteredPatients = patients.filter(p => filters.patients === 'all' || p.status.toLowerCase() === filters.patients);\n//   const filteredAdmins = admins.filter(a => filters.admins === 'all' || a.status.toLowerCase() === filters.admins);\n//   const filteredAppointments = allAppointments.filter(ap => {\n//     if (!ap) return false;\n//     const searchTerm = filters.appointments.toLowerCase();\n//     return searchTerm === 'all' || ap.status.toLowerCase() === searchTerm;\n//   });\n\n//   const tableStyle = {\n//     width: '100%',\n//     borderCollapse: 'collapse',\n//     marginTop: '1rem',\n//     fontSize: '0.9rem',\n//   };\n//   const thStyle = {\n//     border: '1px solid #ddd',\n//     padding: '12px',\n//     backgroundColor: '#f2f2f2',\n//     textAlign: 'left',\n//   };\n//   const tdStyle = {\n//     border: '1px solid #ddd',\n//     padding: '12px',\n//   };\n//   const trHoverStyle = {\n//     backgroundColor: '#f5f5f5',\n//   };\n//   const buttonStyle = {\n//     padding: '6px 12px',\n//     margin: '2px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     cursor: 'pointer',\n//     fontSize: '0.8rem',\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', fontFamily: 'Poppins, sans-serif', background: '#f4f8fb', minHeight: '100vh' }}>\n//       <div style={{ width: sidebarCollapsed ? '0' : '250px', background: '#007bff', color: 'black', padding: '1rem', transition: 'width 0.3s', overflow: 'hidden' }}>\n//         <button onClick={() => { console.log('Sidebar toggle clicked'); setSidebarCollapsed(!sidebarCollapsed); }} style={{ background: 'none', border: 'none', color: 'black', fontSize: '1.5rem', cursor: 'pointer', fontWeight: 'bold' }}>\n//           ☰\n//         </button>\n//         <h2 style={{ color: 'black', fontWeight: 'bold' }}>Admin Menu</h2>\n//         <ul style={{ listStyle: 'none', padding: 0 }}>\n//           <li><button onClick={() => { console.log('Create Doctor section clicked'); setActiveSection('createDoctor'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Create Doctor</button></li>\n//           <li><button onClick={() => { console.log('Create Patient section clicked'); setActiveSection('createPatient'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Create Patient</button></li>\n//           <li><button onClick={() => { console.log('Create Admin section clicked'); setActiveSection('createAdmin'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Create Admin</button></li>\n//           <li><button onClick={() => { console.log('Doctors section clicked'); setActiveSection('doctors'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Doctors</button></li>\n//           <li><button onClick={() => { console.log('Patients section clicked'); setActiveSection('patients'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Patients</button></li>\n//           <li><button onClick={() => { console.log('Admins section clicked'); setActiveSection('admins'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Admins</button></li>\n//           <li><button onClick={() => { console.log('Appointments section clicked'); setActiveSection('appointments'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Appointments</button></li>  \n//           <li><button onClick={() => { console.log('Reschedule Appointment section clicked'); setActiveSection('rescheduleAppointment'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Reschedule Appointment</button></li>\n//           <li><button onClick={() => { console.log('Reassign Appointment section clicked'); setActiveSection('reassignAppointment'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Reassign Appointment</button></li>\n//         </ul>\n//       </div>\n//       <div style={{ flex: 1, padding: '2rem', display: 'flex', flexDirection: 'column' }}>\n//         {loading && <p>Loading...</p>}\n//         {error && <p style={{ color: 'red' }}>{error}</p>}\n//         <div style={{ display: activeSection === 'createDoctor' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Create Doctor</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); createDoctor(); }}>\n//               <input type=\"text\" placeholder=\"Full Name\" value={newDoctor.fullName} onChange={(e) => setNewDoctor({ ...newDoctor, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"email\" placeholder=\"Email\" value={newDoctor.emailId} onChange={(e) => setNewDoctor({ ...newDoctor, emailId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"text\" placeholder=\"Phone\" value={newDoctor.phoneNumber} onChange={(e) => setNewDoctor({ ...newDoctor, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Password\" value={newDoctor.rawPassword} onChange={(e) => setNewDoctor({ ...newDoctor, rawPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Confirm Password\" value={newDoctor.confirmPassword} onChange={(e) => setNewDoctor({ ...newDoctor, confirmPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}/>\n//               <select value={newDoctor.specialization} onChange={(e) => setNewDoctor({ ...newDoctor, specialization: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\n//                 <option value=\"\">Select Specialization</option>\n//                 <option value=\"CARDIOLOGIST\">Cardiologist</option>\n//                 <option value=\"ORTHOPEDIC\">Orthopedic</option>\n//                 <option value=\"DENTIST\">Dentist</option>\n//                 <option value=\"GYNAECOLOGIST\">Gynaecologist</option>\n//                 <option value=\"NEUROLOGIST\">Neurologist</option>\n//                 <option value=\"GASTROENTEROLOGIST\">Gastroenterologist</option>\n//                 <option value=\"PEDIATRICS\">Pediatrics</option>\n//                 <option value=\"RADIOLOGY\">Radiology</option>\n//                 <option value=\"GENERAL_PHYSICIAN\">General Physician</option>\n//                 <option value=\"OTOLARYNGOLOGIST_ENT\">Otolaryngologist ENT</option>\n//                 <option value=\"ENDOCRINOLOGIST\">Endocrinologist</option>\n//                 <option value=\"ONCOLOGY\">Oncology</option>\n//               </select>\n//               <input type=\"text\" placeholder=\"Qualification\" value={newDoctor.qualification} onChange={(e) => setNewDoctor({ ...newDoctor, qualification: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"number\" placeholder=\"Experience Years\" value={newDoctor.experienceYears} onChange={(e) => setNewDoctor({ ...newDoctor, experienceYears: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Create Doctor</button>\n//             </form>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'createPatient' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Create Patient</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); createPatient(); }}>\n//               <input type=\"text\" placeholder=\"Full Name\" value={newPatient.fullName} onChange={(e) => setNewPatient({ ...newPatient, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"email\" placeholder=\"Email\" value={newPatient.emailId} onChange={(e) => setNewPatient({ ...newPatient, emailId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"text\" placeholder=\"Phone\" value={newPatient.phoneNumber} onChange={(e) => setNewPatient({ ...newPatient, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Password\" value={newPatient.rawPassword} onChange={(e) => setNewPatient({ ...newPatient, rawPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Confirm Password\" value={newPatient.confirmPassword} onChange={(e) => setNewPatient({ ...newPatient, confirmPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <select value={newPatient.gender} onChange={(e) => setNewPatient({ ...newPatient, gender: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\n//                 <option value=\"\">Select Gender</option>\n//                 <option value=\"MALE\">Male</option>\n//                 <option value=\"FEMALE\">Female</option>\n//                 <option value=\"OTHER\">Other</option>\n//               </select>\n//               <input type=\"date\" value={newPatient.dateOfBirth} onChange={(e) => setNewPatient({ ...newPatient, dateOfBirth: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Create Patient</button>\n//             </form>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'createAdmin' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Create Admin</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); createAdmin(); }}>\n//               <input type=\"text\" placeholder=\"Full Name\" value={newAdmin.fullName} onChange={(e) => setNewAdmin({ ...newAdmin, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"email\" placeholder=\"Email\" value={newAdmin.email} onChange={(e) => setNewAdmin({ ...newAdmin, email: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"text\" placeholder=\"Phone\" value={newAdmin.phoneNumber} onChange={(e) => setNewAdmin({ ...newAdmin, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Password\" value={newAdmin.rawPassword} onChange={(e) => setNewAdmin({ ...newAdmin, rawPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"password\" placeholder=\"Confirm Password\" value={newAdmin.confirmPassword} onChange={(e) => setNewAdmin({ ...newAdmin, confirmPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <label><input type=\"checkbox\" checked={newAdmin.superAdmin} onChange={(e) => setNewAdmin({ ...newAdmin, superAdmin: e.target.checked })} /> Super Admin</label>\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Create Admin</button>\n//             </form>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'doctors' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Doctors</h3>\n//             <table style={tableStyle}>\n//               <thead>\n//                 <tr>\n//                   <th style={thStyle}>Name</th>\n//                   <th style={thStyle}>Status</th>\n//                   <th style={thStyle}>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredDoctors.map((d, index) => (\n//                   <tr key={d.userId} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\n//                     <td style={tdStyle}>{d.fullName}</td>\n//                     <td style={tdStyle}>{d.status}</td>\n//                     <td style={tdStyle}>\n//                       <button onClick={() => approveDoctor(d.userId)} style={{ ...buttonStyle, background: '#28a745', color: 'white' }}>Approve</button>\n//                       <button onClick={() => blockUser(d.userId, 'BLOCKED')} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Block</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\n//             <h4>Filters</h4>\n//             <select value={filters.doctors} onChange={(e) => setFilters({ ...filters, doctors: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"all\">All</option>\n//               <option value=\"active\">Active</option>\n//               <option value=\"inactive\">Inactive</option>\n//               <option value=\"approved\">Approved</option>\n//               <option value=\"blocked\">Blocked</option>\n//             </select>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'patients' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Patients</h3>\n//             <table style={tableStyle}>\n//               <thead>\n//                 <tr>\n//                   <th style={thStyle}>Name</th>\n//                   <th style={thStyle}>Status</th>\n//                   <th style={thStyle}>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredPatients.map((p, index) => (\n//                   <tr key={p.userId} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\n//                     <td style={tdStyle}>{p.fullName}</td>\n//                     <td style={tdStyle}>{p.status}</td>\n//                     <td style={tdStyle}>\n//                       <button onClick={() => blockUser(p.userId, 'BLOCKED')} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Block</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\n//             <h4>Filters</h4>\n//             <select value={filters.patients} onChange={(e) => setFilters({ ...filters, patients: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"all\">All</option>\n//               <option value=\"active\">Active</option>\n//               <option value=\"inactive\">Inactive</option>\n//               <option value=\"blocked\">Blocked</option>\n//             </select>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'admins' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Admins</h3>\n//             <table style={tableStyle}>\n//               <thead>\n//                 <tr>\n//                   <th style={thStyle}>Name</th>\n//                   <th style={thStyle}>Status</th>\n//                   <th style={thStyle}>Super Admin</th>\n//                   <th style={thStyle}>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredAdmins.map((a, index) => (\n//                   <tr key={a.adminId} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\n//                     <td style={tdStyle}>{a.fullName}</td>\n//                     <td style={tdStyle}>{a.status}</td>\n//                     <td style={tdStyle}>{a.superAdmin ? 'Yes' : 'No'}</td>\n//                     <td style={tdStyle}>\n//                       <button onClick={() => blockUser(a.adminId, 'BLOCKED')} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Block</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\n//             <h4>Filters</h4>\n//             <select value={filters.admins} onChange={(e) => setFilters({ ...filters, admins: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"all\">All</option>\n//               <option value=\"active\">Active</option>\n//               <option value=\"inactive\">Inactive</option>\n//               <option value=\"blocked\">Blocked</option>\n//             </select>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'appointments' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>All Appointments</h3>\n//             <table style={tableStyle}>\n//               <thead>\n//                 <tr>\n//                   <th style={thStyle}>Appointment ID</th>\n//                   <th style={thStyle}>Patient Name & ID</th>\n//                   <th style={thStyle}>Doctor Name & Specialization</th>\n//                   <th style={thStyle}>Date & Time</th>\n//                   <th style={thStyle}>Status</th>\n//                   <th style={thStyle}>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredAppointments.length > 0 ? (\n//                   filteredAppointments.map((ap, index) => (\n//                     <tr key={ap.appointmentId || index} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\n//                       <td style={tdStyle}>{ap.appointmentId}</td>\n//                       <td style={tdStyle}>{ap.patient?.fullName || 'N/A'} ({ap.patient?.userId || 'N/A'})</td>\n//                       <td style={tdStyle}>{ap.doctor ? `${ap.doctor.fullName} (${ap.doctor.specialization})` : 'Not Assigned'}</td>\n//                       <td style={tdStyle}>{ap.scheduledDateTime || ap.preferredDate || 'N/A'}</td>\n//                       <td style={tdStyle}>{ap.status}</td>\n//                       <td style={tdStyle}>\n//                         {ap.status === 'PENDING' && (\n//                           <>\n//                             <button onClick={() => handleApprove(ap.appointmentId)} style={{ ...buttonStyle, background: '#28a745', color: 'white' }}>Approve</button>\n//                             <button onClick={() => reschedulePending(ap.appointmentId)} style={{ ...buttonStyle, background: '#ffc107', color: 'white' }}>Reschedule</button>\n//                             <button onClick={() => cancelAppointment(ap.appointmentId)} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Cancel</button>\n//                           </>\n//                         )}\n//                         {ap.status === 'CANCELLED' && (\n//                           <>\n//                             <button onClick={() => rescheduleCancelled(ap.appointmentId)} style={{ ...buttonStyle, background: '#ffc107', color: 'white' }}>Re-schedule</button>\n//                             <button onClick={() => archiveAppointment(ap.appointmentId)} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Archive</button>\n//                           </>\n//                         )}\n//                         <button onClick={() => viewDetails(ap)} style={{ ...buttonStyle, background: '#17a2b8', color: 'white' }}>View Details</button>\n//                       </td>\n//                     </tr>\n//                   ))\n//                 ) : (\n//                   <tr>\n//                     <td colSpan=\"6\" style={{ textAlign: 'center', padding: '20px' }}>No appointments available.</td>\n//                   </tr>\n//                 )}\n//               </tbody>\n//             </table>\n//           </div>\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\n//             <h4>Filters</h4>\n//             <select value={filters.appointments} onChange={(e) => setFilters({ ...filters, appointments: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"all\">All</option>\n//               <option value=\"pending\">Pending</option>\n//               <option value=\"confirmed\">Confirmed</option>\n//               <option value=\"cancelled\">Cancelled</option>\n//             </select>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'rescheduleAppointment' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Reschedule Appointment</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); rescheduleAppointment(); }}>\n//               <input type=\"number\" placeholder=\"Appointment ID\" value={rescheduleData.appointmentId} onChange={(e) => setRescheduleData({ ...rescheduleData, appointmentId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"datetime-local\" value={rescheduleData.newRequestedDateTime} onChange={(e) => setRescheduleData({ ...rescheduleData, newRequestedDateTime: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"text\" placeholder=\"Reason\" value={rescheduleData.reason} onChange={(e) => setRescheduleData({ ...rescheduleData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Reschedule</button>\n//             </form>\n//           </div>\n//         </div>\n//         <div style={{ display: activeSection === 'reassignAppointment' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\n//           <div style={{ flex: 1 }}>\n//             <h3>Reassign Appointment</h3>\n//             <form onSubmit={(e) => { e.preventDefault(); reassignAppointment(); }}>\n//               <input type=\"number\" placeholder=\"Appointment ID\" value={reassignData.appointmentId} onChange={(e) => setReassignData({ ...reassignData, appointmentId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <select value={reassignData.newDoctorUserId} onChange={(e) => setReassignData({ ...reassignData, newDoctorUserId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\n//                 <option value=\"\">Select New Doctor</option>\n//                 {doctors.map(d => <option key={d.userId} value={d.userId}>{d.fullName} ({d.specialization})</option>)}\n//               </select>\n//               <input type=\"datetime-local\" value={reassignData.requestedDateTime} onChange={(e) => setReassignData({ ...reassignData, requestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <input type=\"text\" placeholder=\"Reason\" value={reassignData.reason} onChange={(e) => setReassignData({ ...reassignData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Reassign</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n\n//       {showApproveModal && (\n//         <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>\n//           <div style={{ background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', width: '400px' }}>\n//             <h3>Approve Appointment</h3>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             <label>Doctor:</label>\n//             <select value={approveData.doctorUserId} onChange={(e) => setApproveData({ ...approveData, doctorUserId: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"\">Select Doctor</option>\n//               {doctors.map(d => <option key={d.userId} value={d.userId}>{d.fullName} ({d.specialization})</option>)}\n//             </select>\n//             <label>Date/Time:</label>\n//             <input type=\"datetime-local\" value={approveData.requestedDateTime} onChange={(e) => setApproveData({ ...approveData, requestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <button onClick={submitApprove} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginRight: '10px' }}>Approve</button>\n//             <button onClick={() => { setShowApproveModal(false); setError(''); }} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Cancel</button>\n//           </div>\n//         </div>\n//       )}\n\n//       {showRescheduleModal && (\n//         <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>\n//           <div style={{ background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', width: '400px' }}>\n//             <h3>Reschedule Cancelled Appointment</h3>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             <label>Doctor:</label>\n//             <select value={rescheduleModalData.newDoctorUserId} onChange={(e) => setRescheduleModalData({ ...rescheduleModalData, newDoctorUserId: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\n//               <option value=\"\">Select Doctor</option>\n//               {doctors.map(d => <option key={d.userId} value={d.userId}>{d.fullName} ({d.specialization})</option>)}\n//             </select>\n//             <label>Date/Time:</label>\n//             <input type=\"datetime-local\" value={rescheduleModalData.requestedDateTime} onChange={(e) => setRescheduleModalData({ ...rescheduleModalData, requestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <label>Reason:</label>\n//             <input type=\"text\" placeholder=\"Reason for reschedule\" value={rescheduleModalData.reason} onChange={(e) => setRescheduleModalData({ ...rescheduleModalData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <button onClick={submitReschedule} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginRight: '10px' }}>Reschedule</button>\n//             <button onClick={() => { setShowRescheduleModal(false); setError(''); }} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Cancel</button>\n//           </div>\n//         </div>\n//       )}\n//       {rescheduleModal && (\n//        <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\n//          <h3>Reschedule Appointment</h3>\n//          <p>Patient: {selectedAppointment?.patient?.fullName || 'N/A'}</p>\n//          <p>Current Date/Time: {selectedAppointment?.scheduledDateTime || 'N/A'}</p>\n//          <input type=\"datetime-local\" value={newDateTime} onChange={(e) => setNewDateTime(e.target.value)} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//          <button onClick={() => {\n//            // UPDATED: Use selectedAppointment for modal-based reschedule\n//            adminAPI.rescheduleAppointment(selectedAppointment.appointmentId, { newRequestedDateTime: newDateTime });\n//            setRescheduleModal(false);\n//            setNewDateTime('');\n//            fetchData();\n//            alert('Appointment rescheduled successfully');\n//          }} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\n//          <button onClick={() => setRescheduleModal(false)} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\n//        </div>\n//      )}\n\n//       {showPendingRescheduleModal && (\n//         <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>\n//           <div style={{ background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', width: '400px' }}>\n//             <h3>Reschedule Pending Appointment</h3>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             <label>Date/Time:</label>\n//             <input type=\"datetime-local\" value={pendingRescheduleData.newRequestedDateTime} onChange={(e) => setPendingRescheduleData({ ...pendingRescheduleData, newRequestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <label>Reason:</label>\n//             <input type=\"text\" placeholder=\"Reason for reschedule\" value={pendingRescheduleData.reason} onChange={(e) => setPendingRescheduleData({ ...pendingRescheduleData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\n//             <button onClick={submitPendingReschedule} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginRight: '10px' }}>Reschedule</button>\n//             <button onClick={() => { setShowPendingRescheduleModal(false); setError(''); }} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Cancel</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AdminDashboard;","map":{"version":3,"names":[],"sources":["/Users/poojav/Desktop/MediCareOnline/FrontendMediCare/src/components/AdminDashboard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { adminAPI } from '../services/api';\r\n\r\n// const AdminDashboard = () => {\r\n//   const [activeSection, setActiveSection] = useState('doctors');\r\n//   const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\r\n//   const [doctors, setDoctors] = useState([]);\r\n//   const [patients, setPatients] = useState([]);\r\n//   const [admins, setAdmins] = useState([]);\r\n//   const [allAppointments, setAllAppointments] = useState([]);  // Combined list for all appointments\r\n//   const [newDoctor, setNewDoctor] = useState({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', specialization: '', qualification: '', experienceYears: '' });\r\n//   const [newPatient, setNewPatient] = useState({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', gender: '', dateOfBirth: '' });\r\n//   const [newAdmin, setNewAdmin] = useState({ fullName: '', email: '', phoneNumber: '', rawPassword: '', confirmPassword: '', superAdmin: false });\r\n//   const [reassignData, setReassignData] = useState({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });\r\n//   const [rescheduleData, setRescheduleData] = useState({ appointmentId: '', newRequestedDateTime: '', reason: '' });\r\n//   const [filters, setFilters] = useState({ doctors: 'all', patients: 'all', admins: 'all', appointments: 'all' });  // Added appointments filter\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [showApproveModal, setShowApproveModal] = useState(false);\r\n//   const [approveData, setApproveData] = useState({ appointmentId: '', doctorUserId: '', requestedDateTime: '' });\r\n//   const [showRescheduleModal, setShowRescheduleModal] = useState(false);  // For cancelled appointments\r\n//   const [rescheduleModalData, setRescheduleModalData] = useState({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });  // For cancelled\r\n//   const [showPendingRescheduleModal, setShowPendingRescheduleModal] = useState(false);  // For pending appointments\r\n//   const [pendingRescheduleData, setPendingRescheduleData] = useState({ appointmentId: '', newRequestedDateTime: '', reason: '' });  // For pending\r\n//   const [error, setError] = useState('');\r\n//   const [selectedAppointment, setSelectedAppointment] = useState(null);\r\n//      const [newDateTime, setNewDateTime] = useState('');\r\n//      const [rescheduleModal, setRescheduleModal] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const fetchData = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const [d, p, a, appts] = await Promise.all([\r\n//         adminAPI.getDoctors(),\r\n//         adminAPI.getPatients(),\r\n//         adminAPI.getAdmins(),\r\n//         adminAPI.getAllAppointments()  // New: Fetch all appointments\r\n//       ]);\r\n//       setDoctors(d.data || []);\r\n//       setPatients(p.data || []);\r\n//       setAdmins(a.data || []);\r\n//       setAllAppointments(appts.data || []);\r\n      \r\n//       console.log('Fetched doctors:', d.data);\r\n//       console.log('Fetched patients:', p.data);\r\n//       console.log('Fetched admins:', a.data);\r\n//       console.log('Fetched all appointments:', appts.data);\r\n//     } catch (err) {\r\n//       console.error('Fetch error details:', err);\r\n//       alert('Error fetching data: ' + (err.response?.data?.message || err.message));\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const createDoctor = async () => {\r\n//     console.log('Create Doctor button clicked');\r\n//     if (newDoctor.rawPassword !== newDoctor.confirmPassword) {\r\n//       alert('Passwords do not match');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await adminAPI.createDoctor(newDoctor);\r\n//       setNewDoctor({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', specialization: '', qualification: '', experienceYears: '' });\r\n//       fetchData();\r\n//       alert('Doctor created successfully!');\r\n//     } catch (err) {\r\n//       alert('Error creating doctor: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const createPatient = async () => {\r\n//     console.log('Create Patient button clicked');\r\n//     if (newPatient.rawPassword !== newPatient.confirmPassword) {\r\n//       alert('Passwords do not match');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await adminAPI.createPatient(newPatient);\r\n//       setNewPatient({ fullName: '', emailId: '', phoneNumber: '', rawPassword: '', confirmPassword: '', gender: '', dateOfBirth: '' });\r\n//       fetchData();\r\n//       alert('Patient created successfully!');\r\n//     } catch (err) {\r\n//       alert('Error creating patient: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const createAdmin = async () => {\r\n//     console.log('Create Admin button clicked');\r\n//     if (newAdmin.rawPassword !== newAdmin.confirmPassword) {\r\n//       alert('Passwords do not match');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await adminAPI.createAdmin(newAdmin);\r\n//       setNewAdmin({ fullName: '', email: '', phoneNumber: '', rawPassword: '', confirmPassword: '', superAdmin: false });\r\n//       fetchData();\r\n//       alert('Admin created successfully!');\r\n//     } catch (err) {\r\n//       alert('Error creating admin: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const approveDoctor = async (id) => {\r\n//     console.log('Approve Doctor button clicked for ID:', id);\r\n//     try {\r\n//       await adminAPI.approveDoctor(id);\r\n//       fetchData();\r\n//       alert('Doctor approved!');\r\n//     } catch (err) {\r\n//       alert('Error approving doctor: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const blockUser = async (id, status) => {\r\n//     console.log('Block User button clicked for ID:', id, 'Status:', status);\r\n//     try {\r\n//       await adminAPI.blockUser(id, status);\r\n//       fetchData();\r\n//       alert('User status updated!');\r\n//     } catch (err) {\r\n//       alert('Error updating user status: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const handleApprove = (appointmentId) => {\r\n//     console.log('Approve Appointment button clicked for ID:', appointmentId);\r\n//     const now = new Date();\r\n//     const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\r\n//     nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\r\n//     if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\r\n//     if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\r\n//     setApproveData({ appointmentId, doctorUserId: '', requestedDateTime: nextHour.toISOString().slice(0, 16) });\r\n//     setShowApproveModal(true);\r\n//   };\r\n\r\n//   const submitApprove = async () => {\r\n//     const { appointmentId, doctorUserId, requestedDateTime } = approveData;\r\n//     if (!doctorUserId || !requestedDateTime) {\r\n//       setError('Please select a doctor and date/time.');\r\n//       return;\r\n//     }\r\n//     const doctorExists = doctors.some(d => d.userId == doctorUserId);\r\n//     if (!doctorExists) {\r\n//       setError('Invalid Doctor ID. Please select from the list.');\r\n//       return;\r\n//     }\r\n//     const dt = new Date(requestedDateTime);\r\n//     const now = new Date();\r\n//     if (dt <= now) {\r\n//       setError('Date/time must be in the future.');\r\n//       return;\r\n//     }\r\n//     const hours = dt.getHours();\r\n//     const minutes = dt.getMinutes();\r\n//     if (hours < 9 || hours >= 17 || (hours === 12 && minutes >= 0) || (hours === 13 && minutes < 60)) {\r\n//       setError('Slot outside working hours. Working hours: 9:00 AM - 5:00 PM, excluding lunch 12:00-1:00 PM.');\r\n//       return;\r\n//     }\r\n//     if (minutes % 20 !== 0) {\r\n//       setError('Slot must align to 20-minute boundary (e.g., 09:00, 09:20).');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await adminAPI.approveAppointment(appointmentId, { doctorUserId: parseInt(doctorUserId), requestedDateTime });\r\n//       setShowApproveModal(false);\r\n//       setApproveData({ appointmentId: '', doctorUserId: '', requestedDateTime: '' });\r\n//       setError('');\r\n//       fetchData();\r\n//       alert('Appointment approved!');\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || 'Error approving appointment: ' + err.message);\r\n//     }\r\n//   };\r\n\r\n//   const cancelAppointment = async (id) => {\r\n//     console.log('Cancel Appointment button clicked for ID:', id);\r\n//     const reason = prompt('Enter cancellation reason:');\r\n//     if (!reason) return;\r\n//     try {\r\n//       await adminAPI.cancelAppointment(id, { reason });\r\n//       fetchData();\r\n//       alert('Appointment cancelled!');\r\n//     } catch (err) {\r\n//       alert('Error cancelling appointment: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const viewDetails = (appointment) => {\r\n//     console.log('View Details button clicked for appointment:', appointment.appointmentId);\r\n//     alert('Appointment Details:\\n' + JSON.stringify(appointment, null, 2));\r\n//   };\r\n\r\n//   // const rescheduleAppointment = async () => {\r\n//   //   try {\r\n//   //     // UPDATED: Pass appointmentId as path param, and data as body\r\n//   //     await adminAPI.rescheduleAppointment(rescheduleData.appointmentId, {\r\n//   //       newRequestedDateTime: rescheduleData.newRequestedDateTime,\r\n//   //       reason: rescheduleData.reason\r\n//   //     });\r\n//   //     setRescheduleData({ appointmentId: '', newRequestedDateTime: '', reason: '' });\r\n//   //     fetchData();\r\n//   //     alert('Appointment rescheduled successfully!');\r\n//   //   } catch (err) {\r\n//   //     alert('Error rescheduling appointment: ' + (err.response?.data?.message || err.message));\r\n//   //   }\r\n//   // };\r\n\r\n//   const rescheduleCancelled = async (appointmentId) => {\r\n//     console.log('Re-schedule Cancelled button clicked for ID:', appointmentId);\r\n//     const now = new Date();\r\n//     const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\r\n//     nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\r\n//     if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\r\n//     if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\r\n//     // NEW: Set selectedAppointment to the current appointment for modal display\r\n//     const appt = allAppointments.find(a => a.appointmentId === appointmentId);\r\n//     setSelectedAppointment(appt);\r\n//     setRescheduleModalData({ appointmentId, newDoctorUserId: '', requestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\r\n//     setShowRescheduleModal(true);\r\n//   };\r\n//   const reschedulePending = async (appointmentId) => {\r\n//     console.log('Reschedule Pending button clicked for ID:', appointmentId);\r\n//     const now = new Date();\r\n//     const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\r\n//     nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\r\n//     if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\r\n//     if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\r\n//     // NEW: Set selectedAppointment\r\n//     const appt = allAppointments.find(a => a.appointmentId === appointmentId);\r\n//     setSelectedAppointment(appt);\r\n//     setPendingRescheduleData({ appointmentId, newRequestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\r\n//     setShowPendingRescheduleModal(true);\r\n//   };\r\n//   const rescheduleAppointment = async () => {\r\n//     try {\r\n//       // UPDATED: Use rescheduleData instead of  variables\r\n//       await adminAPI.rescheduleAppointment(rescheduleData.appointmentId, {\r\n//         newRequestedDateTime: rescheduleData.newRequestedDateTime,\r\n//         reason: rescheduleData.reason\r\n//       });\r\n//       setRescheduleData({ appointmentId: '', newRequestedDateTime: '', reason: '' });\r\n//       fetchData();\r\n//       alert('Appointment rescheduled successfully!');\r\n//     } catch (err) {\r\n//       alert('Error rescheduling: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const reassignAppointment = async () => {\r\n//     try {\r\n//       // UPDATED: Pass appointmentId as path param, and data as body\r\n//       await adminAPI.reassignAppointment(reassignData.appointmentId, {\r\n//         newDoctorUserId: reassignData.newDoctorUserId,\r\n//         requestedDateTime: reassignData.requestedDateTime,\r\n//         reason: reassignData.reason\r\n//       });\r\n//       setReassignData({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });\r\n//       fetchData();\r\n//       alert('Appointment reassigned successfully!');\r\n//     } catch (err) {\r\n//       alert('Error reassigning appointment: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   // const rescheduleCancelled = async (appointmentId) => {\r\n//   //   console.log('Re-schedule Cancelled button clicked for ID:', appointmentId);\r\n//   //   const now = new Date();\r\n//   //   const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\r\n//   //   nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\r\n//   //   if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\r\n//   //   if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\r\n//   //   setRescheduleModalData({ appointmentId, newDoctorUserId: '', requestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\r\n//   //   setShowRescheduleModal(true);\r\n//   // };\r\n\r\n//   const submitReschedule = async () => {\r\n//     const { appointmentId, newDoctorUserId, requestedDateTime, reason } = rescheduleModalData;\r\n//     if (!newDoctorUserId || !requestedDateTime) {\r\n//       setError('Please select a doctor and date/time.');\r\n//       return;\r\n//     }\r\n//     const doctorExists = doctors.some(d => d.userId == newDoctorUserId);\r\n//     if (!doctorExists) {\r\n//       setError('Invalid Doctor ID. Please select from the list.');\r\n//       return;\r\n//     }\r\n//     const dt = new Date(requestedDateTime);\r\n//     const now = new Date();\r\n//     if (dt <= now) {\r\n//       setError('Date/time must be in the future.');\r\n//       return;\r\n//     }\r\n//     const hours = dt.getHours();\r\n//     const minutes = dt.getMinutes();\r\n//     if (hours < 9 || hours >= 17 || (hours === 12 && minutes >= 0) || (hours === 13 && minutes < 60)) {\r\n//       setError('Slot outside working hours. Working hours: 9:00 AM - 5:00 PM, excluding lunch 12:00-1:00 PM.');\r\n//       return;\r\n//     }\r\n//     if (minutes % 20 !== 0) {\r\n//       setError('Slot must align to 20-minute boundary (e.g., 09:00, 09:20).');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await adminAPI.reassignAppointment({ appointmentId: parseInt(appointmentId), newDoctorUserId: parseInt(newDoctorUserId), requestedDateTime, reason });\r\n//       setShowRescheduleModal(false);\r\n//       setRescheduleModalData({ appointmentId: '', newDoctorUserId: '', requestedDateTime: '', reason: '' });\r\n//       setError('');\r\n//       fetchData();\r\n//       alert('Appointment rescheduled!');\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || 'Error rescheduling appointment: ' + err.message);\r\n//     }\r\n//   };\r\n\r\n//   // const reschedulePending = async (appointmentId) => {\r\n//   //   console.log('Reschedule Pending button clicked for ID:', appointmentId);\r\n//   //   const now = new Date();\r\n//   //   const nextHour = new Date(now.getTime() + 60 * 60 * 1000);\r\n//   //   nextHour.setMinutes(Math.ceil(nextHour.getMinutes() / 20) * 20);\r\n//   //   if (nextHour.getHours() < 9) nextHour.setHours(9, 0, 0, 0);\r\n//   //   if (nextHour.getHours() >= 17) nextHour.setDate(nextHour.getDate() + 1, 9, 0, 0, 0);\r\n//   //   setPendingRescheduleData({ appointmentId, newRequestedDateTime: nextHour.toISOString().slice(0, 16), reason: '' });\r\n//   //   setShowPendingRescheduleModal(true);\r\n//   // };\r\n\r\n//   const submitPendingReschedule = async () => {\r\n//     const { appointmentId, newRequestedDateTime, reason } = pendingRescheduleData;\r\n//     if (!newRequestedDateTime) {\r\n//       setError('Please select a date/time.');\r\n//       return;\r\n//     }\r\n//     const dt = new Date(newRequestedDateTime);\r\n//     const now = new Date();\r\n//     if (dt <= now) {\r\n//       setError('Date/time must be in the future.');\r\n//       return;\r\n//     }\r\n//     const hours = dt.getHours();\r\n//     const minutes = dt.getMinutes();\r\n//     if (hours < 9 || hours >= 17 || (hours === 12 && minutes >= 0) || (hours === 13 && minutes < 60)) {\r\n//       setError('Slot outside working hours.');\r\n//       return;\r\n//     }\r\n//     if (minutes % 20 !== 0) {\r\n//       setError('Slot must align to 20-minute boundary.');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await adminAPI.rescheduleAppointment({ appointmentId: parseInt(appointmentId), newRequestedDateTime, reason });\r\n//       setShowPendingRescheduleModal(false);\r\n//       setPendingRescheduleData({ appointmentId: '', newRequestedDateTime: '', reason: '' });\r\n//       setError('');\r\n//       fetchData();\r\n//       alert('Appointment rescheduled!');\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || 'Error rescheduling appointment: ' + err.message);\r\n//     }\r\n//   };\r\n\r\n//   const archiveAppointment = async (id) => {\r\n//     try {\r\n//       await adminAPI.archiveAppointment(id);\r\n//       fetchData();\r\n//       alert('Appointment archived!');\r\n//     } catch (err) {\r\n//       alert('Error archiving appointment: ' + (err.response?.data?.message || err.message));\r\n//     }\r\n//   };\r\n\r\n//   const filteredDoctors = doctors.filter(d => filters.doctors === 'all' || d.status.toLowerCase() === filters.doctors);\r\n//   const filteredPatients = patients.filter(p => filters.patients === 'all' || p.status.toLowerCase() === filters.patients);\r\n//   const filteredAdmins = admins.filter(a => filters.admins === 'all' || a.status.toLowerCase() === filters.admins);\r\n//   const filteredAppointments = allAppointments.filter(ap => {\r\n//     if (!ap) return false;\r\n//     const searchTerm = filters.appointments.toLowerCase();\r\n//     return searchTerm === 'all' || ap.status.toLowerCase() === searchTerm;\r\n//   });\r\n\r\n//   const tableStyle = {\r\n//     width: '100%',\r\n//     borderCollapse: 'collapse',\r\n//     marginTop: '1rem',\r\n//     fontSize: '0.9rem',\r\n//   };\r\n//   const thStyle = {\r\n//     border: '1px solid #ddd',\r\n//     padding: '12px',\r\n//     backgroundColor: '#f2f2f2',\r\n//     textAlign: 'left',\r\n//   };\r\n//   const tdStyle = {\r\n//     border: '1px solid #ddd',\r\n//     padding: '12px',\r\n//   };\r\n//   const trHoverStyle = {\r\n//     backgroundColor: '#f5f5f5',\r\n//   };\r\n//   const buttonStyle = {\r\n//     padding: '6px 12px',\r\n//     margin: '2px',\r\n//     border: 'none',\r\n//     borderRadius: '4px',\r\n//     cursor: 'pointer',\r\n//     fontSize: '0.8rem',\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ display: 'flex', fontFamily: 'Poppins, sans-serif', background: '#f4f8fb', minHeight: '100vh' }}>\r\n//       <div style={{ width: sidebarCollapsed ? '0' : '250px', background: '#007bff', color: 'black', padding: '1rem', transition: 'width 0.3s', overflow: 'hidden' }}>\r\n//         <button onClick={() => { console.log('Sidebar toggle clicked'); setSidebarCollapsed(!sidebarCollapsed); }} style={{ background: 'none', border: 'none', color: 'black', fontSize: '1.5rem', cursor: 'pointer', fontWeight: 'bold' }}>\r\n//           ☰\r\n//         </button>\r\n//         <h2 style={{ color: 'black', fontWeight: 'bold' }}>Admin Menu</h2>\r\n//         <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//           <li><button onClick={() => { console.log('Create Doctor section clicked'); setActiveSection('createDoctor'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Create Doctor</button></li>\r\n//           <li><button onClick={() => { console.log('Create Patient section clicked'); setActiveSection('createPatient'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Create Patient</button></li>\r\n//           <li><button onClick={() => { console.log('Create Admin section clicked'); setActiveSection('createAdmin'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Create Admin</button></li>\r\n//           <li><button onClick={() => { console.log('Doctors section clicked'); setActiveSection('doctors'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Doctors</button></li>\r\n//           <li><button onClick={() => { console.log('Patients section clicked'); setActiveSection('patients'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Patients</button></li>\r\n//           <li><button onClick={() => { console.log('Admins section clicked'); setActiveSection('admins'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Admins</button></li>\r\n//           <li><button onClick={() => { console.log('Appointments section clicked'); setActiveSection('appointments'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Appointments</button></li>  \r\n//           <li><button onClick={() => { console.log('Reschedule Appointment section clicked'); setActiveSection('rescheduleAppointment'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Reschedule Appointment</button></li>\r\n//           <li><button onClick={() => { console.log('Reassign Appointment section clicked'); setActiveSection('reassignAppointment'); }} style={{ background: 'none', border: 'none', color: 'black', cursor: 'pointer', fontWeight: 'bold' }}>Reassign Appointment</button></li>\r\n//         </ul>\r\n//       </div>\r\n//       <div style={{ flex: 1, padding: '2rem', display: 'flex', flexDirection: 'column' }}>\r\n//         {loading && <p>Loading...</p>}\r\n//         {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//         <div style={{ display: activeSection === 'createDoctor' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Create Doctor</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); createDoctor(); }}>\r\n//               <input type=\"text\" placeholder=\"Full Name\" value={newDoctor.fullName} onChange={(e) => setNewDoctor({ ...newDoctor, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"email\" placeholder=\"Email\" value={newDoctor.emailId} onChange={(e) => setNewDoctor({ ...newDoctor, emailId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"text\" placeholder=\"Phone\" value={newDoctor.phoneNumber} onChange={(e) => setNewDoctor({ ...newDoctor, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Password\" value={newDoctor.rawPassword} onChange={(e) => setNewDoctor({ ...newDoctor, rawPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Confirm Password\" value={newDoctor.confirmPassword} onChange={(e) => setNewDoctor({ ...newDoctor, confirmPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}/>\r\n//               <select value={newDoctor.specialization} onChange={(e) => setNewDoctor({ ...newDoctor, specialization: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//                 <option value=\"\">Select Specialization</option>\r\n//                 <option value=\"CARDIOLOGIST\">Cardiologist</option>\r\n//                 <option value=\"ORTHOPEDIC\">Orthopedic</option>\r\n//                 <option value=\"DENTIST\">Dentist</option>\r\n//                 <option value=\"GYNAECOLOGIST\">Gynaecologist</option>\r\n//                 <option value=\"NEUROLOGIST\">Neurologist</option>\r\n//                 <option value=\"GASTROENTEROLOGIST\">Gastroenterologist</option>\r\n//                 <option value=\"PEDIATRICS\">Pediatrics</option>\r\n//                 <option value=\"RADIOLOGY\">Radiology</option>\r\n//                 <option value=\"GENERAL_PHYSICIAN\">General Physician</option>\r\n//                 <option value=\"OTOLARYNGOLOGIST_ENT\">Otolaryngologist ENT</option>\r\n//                 <option value=\"ENDOCRINOLOGIST\">Endocrinologist</option>\r\n//                 <option value=\"ONCOLOGY\">Oncology</option>\r\n//               </select>\r\n//               <input type=\"text\" placeholder=\"Qualification\" value={newDoctor.qualification} onChange={(e) => setNewDoctor({ ...newDoctor, qualification: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"number\" placeholder=\"Experience Years\" value={newDoctor.experienceYears} onChange={(e) => setNewDoctor({ ...newDoctor, experienceYears: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Create Doctor</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'createPatient' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Create Patient</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); createPatient(); }}>\r\n//               <input type=\"text\" placeholder=\"Full Name\" value={newPatient.fullName} onChange={(e) => setNewPatient({ ...newPatient, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"email\" placeholder=\"Email\" value={newPatient.emailId} onChange={(e) => setNewPatient({ ...newPatient, emailId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"text\" placeholder=\"Phone\" value={newPatient.phoneNumber} onChange={(e) => setNewPatient({ ...newPatient, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Password\" value={newPatient.rawPassword} onChange={(e) => setNewPatient({ ...newPatient, rawPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Confirm Password\" value={newPatient.confirmPassword} onChange={(e) => setNewPatient({ ...newPatient, confirmPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <select value={newPatient.gender} onChange={(e) => setNewPatient({ ...newPatient, gender: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//                 <option value=\"\">Select Gender</option>\r\n//                 <option value=\"MALE\">Male</option>\r\n//                 <option value=\"FEMALE\">Female</option>\r\n//                 <option value=\"OTHER\">Other</option>\r\n//               </select>\r\n//               <input type=\"date\" value={newPatient.dateOfBirth} onChange={(e) => setNewPatient({ ...newPatient, dateOfBirth: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Create Patient</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'createAdmin' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Create Admin</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); createAdmin(); }}>\r\n//               <input type=\"text\" placeholder=\"Full Name\" value={newAdmin.fullName} onChange={(e) => setNewAdmin({ ...newAdmin, fullName: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"email\" placeholder=\"Email\" value={newAdmin.email} onChange={(e) => setNewAdmin({ ...newAdmin, email: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"text\" placeholder=\"Phone\" value={newAdmin.phoneNumber} onChange={(e) => setNewAdmin({ ...newAdmin, phoneNumber: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Password\" value={newAdmin.rawPassword} onChange={(e) => setNewAdmin({ ...newAdmin, rawPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"password\" placeholder=\"Confirm Password\" value={newAdmin.confirmPassword} onChange={(e) => setNewAdmin({ ...newAdmin, confirmPassword: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <label><input type=\"checkbox\" checked={newAdmin.superAdmin} onChange={(e) => setNewAdmin({ ...newAdmin, superAdmin: e.target.checked })} /> Super Admin</label>\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Create Admin</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'doctors' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Doctors</h3>\r\n//             <table style={tableStyle}>\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th style={thStyle}>Name</th>\r\n//                   <th style={thStyle}>Status</th>\r\n//                   <th style={thStyle}>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {filteredDoctors.map((d, index) => (\r\n//                   <tr key={d.userId} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\r\n//                     <td style={tdStyle}>{d.fullName}</td>\r\n//                     <td style={tdStyle}>{d.status}</td>\r\n//                     <td style={tdStyle}>\r\n//                       <button onClick={() => approveDoctor(d.userId)} style={{ ...buttonStyle, background: '#28a745', color: 'white' }}>Approve</button>\r\n//                       <button onClick={() => blockUser(d.userId, 'BLOCKED')} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Block</button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\r\n//             <h4>Filters</h4>\r\n//             <select value={filters.doctors} onChange={(e) => setFilters({ ...filters, doctors: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"all\">All</option>\r\n//               <option value=\"active\">Active</option>\r\n//               <option value=\"inactive\">Inactive</option>\r\n//               <option value=\"approved\">Approved</option>\r\n//               <option value=\"blocked\">Blocked</option>\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'patients' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Patients</h3>\r\n//             <table style={tableStyle}>\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th style={thStyle}>Name</th>\r\n//                   <th style={thStyle}>Status</th>\r\n//                   <th style={thStyle}>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {filteredPatients.map((p, index) => (\r\n//                   <tr key={p.userId} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\r\n//                     <td style={tdStyle}>{p.fullName}</td>\r\n//                     <td style={tdStyle}>{p.status}</td>\r\n//                     <td style={tdStyle}>\r\n//                       <button onClick={() => blockUser(p.userId, 'BLOCKED')} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Block</button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\r\n//             <h4>Filters</h4>\r\n//             <select value={filters.patients} onChange={(e) => setFilters({ ...filters, patients: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"all\">All</option>\r\n//               <option value=\"active\">Active</option>\r\n//               <option value=\"inactive\">Inactive</option>\r\n//               <option value=\"blocked\">Blocked</option>\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'admins' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Admins</h3>\r\n//             <table style={tableStyle}>\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th style={thStyle}>Name</th>\r\n//                   <th style={thStyle}>Status</th>\r\n//                   <th style={thStyle}>Super Admin</th>\r\n//                   <th style={thStyle}>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {filteredAdmins.map((a, index) => (\r\n//                   <tr key={a.adminId} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\r\n//                     <td style={tdStyle}>{a.fullName}</td>\r\n//                     <td style={tdStyle}>{a.status}</td>\r\n//                     <td style={tdStyle}>{a.superAdmin ? 'Yes' : 'No'}</td>\r\n//                     <td style={tdStyle}>\r\n//                       <button onClick={() => blockUser(a.adminId, 'BLOCKED')} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Block</button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\r\n//             <h4>Filters</h4>\r\n//             <select value={filters.admins} onChange={(e) => setFilters({ ...filters, admins: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"all\">All</option>\r\n//               <option value=\"active\">Active</option>\r\n//               <option value=\"inactive\">Inactive</option>\r\n//               <option value=\"blocked\">Blocked</option>\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'appointments' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>All Appointments</h3>\r\n//             <table style={tableStyle}>\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th style={thStyle}>Appointment ID</th>\r\n//                   <th style={thStyle}>Patient Name & ID</th>\r\n//                   <th style={thStyle}>Doctor Name & Specialization</th>\r\n//                   <th style={thStyle}>Date & Time</th>\r\n//                   <th style={thStyle}>Status</th>\r\n//                   <th style={thStyle}>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {filteredAppointments.length > 0 ? (\r\n//                   filteredAppointments.map((ap, index) => (\r\n//                     <tr key={ap.appointmentId || index} style={index % 2 === 0 ? {} : trHoverStyle} onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'} onMouseLeave={(e) => e.target.style.backgroundColor = index % 2 === 0 ? 'white' : '#f5f5f5'}>\r\n//                       <td style={tdStyle}>{ap.appointmentId}</td>\r\n//                       <td style={tdStyle}>{ap.patient?.fullName || 'N/A'} ({ap.patient?.userId || 'N/A'})</td>\r\n//                       <td style={tdStyle}>{ap.doctor ? `${ap.doctor.fullName} (${ap.doctor.specialization})` : 'Not Assigned'}</td>\r\n//                       <td style={tdStyle}>{ap.scheduledDateTime || ap.preferredDate || 'N/A'}</td>\r\n//                       <td style={tdStyle}>{ap.status}</td>\r\n//                       <td style={tdStyle}>\r\n//                         {ap.status === 'PENDING' && (\r\n//                           <>\r\n//                             <button onClick={() => handleApprove(ap.appointmentId)} style={{ ...buttonStyle, background: '#28a745', color: 'white' }}>Approve</button>\r\n//                             <button onClick={() => reschedulePending(ap.appointmentId)} style={{ ...buttonStyle, background: '#ffc107', color: 'white' }}>Reschedule</button>\r\n//                             <button onClick={() => cancelAppointment(ap.appointmentId)} style={{ ...buttonStyle, background: '#dc3545', color: 'white' }}>Cancel</button>\r\n//                           </>\r\n//                         )}\r\n//                         {ap.status === 'CANCELLED' && (\r\n//                           <>\r\n//                             <button onClick={() => rescheduleCancelled(ap.appointmentId)} style={{ ...buttonStyle, background: '#ffc107', color: 'white' }}>Re-schedule</button>\r\n//                             <button onClick={() => archiveAppointment(ap.appointmentId)} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Archive</button>\r\n//                           </>\r\n//                         )}\r\n//                         <button onClick={() => viewDetails(ap)} style={{ ...buttonStyle, background: '#17a2b8', color: 'white' }}>View Details</button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))\r\n//                 ) : (\r\n//                   <tr>\r\n//                     <td colSpan=\"6\" style={{ textAlign: 'center', padding: '20px' }}>No appointments available.</td>\r\n//                   </tr>\r\n//                 )}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//           <div style={{ width: '200px', marginLeft: '2rem', marginTop: '-1rem' }}>\r\n//             <h4>Filters</h4>\r\n//             <select value={filters.appointments} onChange={(e) => setFilters({ ...filters, appointments: e.target.value })} style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"all\">All</option>\r\n//               <option value=\"pending\">Pending</option>\r\n//               <option value=\"confirmed\">Confirmed</option>\r\n//               <option value=\"cancelled\">Cancelled</option>\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'rescheduleAppointment' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Reschedule Appointment</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); rescheduleAppointment(); }}>\r\n//               <input type=\"number\" placeholder=\"Appointment ID\" value={rescheduleData.appointmentId} onChange={(e) => setRescheduleData({ ...rescheduleData, appointmentId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"datetime-local\" value={rescheduleData.newRequestedDateTime} onChange={(e) => setRescheduleData({ ...rescheduleData, newRequestedDateTime: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"text\" placeholder=\"Reason\" value={rescheduleData.reason} onChange={(e) => setRescheduleData({ ...rescheduleData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Reschedule</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: activeSection === 'reassignAppointment' ? 'flex' : 'none', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', flex: 1 }}>\r\n//           <div style={{ flex: 1 }}>\r\n//             <h3>Reassign Appointment</h3>\r\n//             <form onSubmit={(e) => { e.preventDefault(); reassignAppointment(); }}>\r\n//               <input type=\"number\" placeholder=\"Appointment ID\" value={reassignData.appointmentId} onChange={(e) => setReassignData({ ...reassignData, appointmentId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <select value={reassignData.newDoctorUserId} onChange={(e) => setReassignData({ ...reassignData, newDoctorUserId: e.target.value })} required style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//                 <option value=\"\">Select New Doctor</option>\r\n//                 {doctors.map(d => <option key={d.userId} value={d.userId}>{d.fullName} ({d.specialization})</option>)}\r\n//               </select>\r\n//               <input type=\"datetime-local\" value={reassignData.requestedDateTime} onChange={(e) => setReassignData({ ...reassignData, requestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <input type=\"text\" placeholder=\"Reason\" value={reassignData.reason} onChange={(e) => setReassignData({ ...reassignData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//               <button type=\"submit\" style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Reassign</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {showApproveModal && (\r\n//         <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>\r\n//           <div style={{ background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', width: '400px' }}>\r\n//             <h3>Approve Appointment</h3>\r\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//             <label>Doctor:</label>\r\n//             <select value={approveData.doctorUserId} onChange={(e) => setApproveData({ ...approveData, doctorUserId: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"\">Select Doctor</option>\r\n//               {doctors.map(d => <option key={d.userId} value={d.userId}>{d.fullName} ({d.specialization})</option>)}\r\n//             </select>\r\n//             <label>Date/Time:</label>\r\n//             <input type=\"datetime-local\" value={approveData.requestedDateTime} onChange={(e) => setApproveData({ ...approveData, requestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <button onClick={submitApprove} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginRight: '10px' }}>Approve</button>\r\n//             <button onClick={() => { setShowApproveModal(false); setError(''); }} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {showRescheduleModal && (\r\n//         <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>\r\n//           <div style={{ background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', width: '400px' }}>\r\n//             <h3>Reschedule Cancelled Appointment</h3>\r\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//             <label>Doctor:</label>\r\n//             <select value={rescheduleModalData.newDoctorUserId} onChange={(e) => setRescheduleModalData({ ...rescheduleModalData, newDoctorUserId: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }}>\r\n//               <option value=\"\">Select Doctor</option>\r\n//               {doctors.map(d => <option key={d.userId} value={d.userId}>{d.fullName} ({d.specialization})</option>)}\r\n//             </select>\r\n//             <label>Date/Time:</label>\r\n//             <input type=\"datetime-local\" value={rescheduleModalData.requestedDateTime} onChange={(e) => setRescheduleModalData({ ...rescheduleModalData, requestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <label>Reason:</label>\r\n//             <input type=\"text\" placeholder=\"Reason for reschedule\" value={rescheduleModalData.reason} onChange={(e) => setRescheduleModalData({ ...rescheduleModalData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <button onClick={submitReschedule} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginRight: '10px' }}>Reschedule</button>\r\n//             <button onClick={() => { setShowRescheduleModal(false); setError(''); }} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {rescheduleModal && (\r\n//        <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', zIndex: 1000 }}>\r\n//          <h3>Reschedule Appointment</h3>\r\n//          <p>Patient: {selectedAppointment?.patient?.fullName || 'N/A'}</p>\r\n//          <p>Current Date/Time: {selectedAppointment?.scheduledDateTime || 'N/A'}</p>\r\n//          <input type=\"datetime-local\" value={newDateTime} onChange={(e) => setNewDateTime(e.target.value)} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//          <button onClick={() => {\r\n//            // UPDATED: Use selectedAppointment for modal-based reschedule\r\n//            adminAPI.rescheduleAppointment(selectedAppointment.appointmentId, { newRequestedDateTime: newDateTime });\r\n//            setRescheduleModal(false);\r\n//            setNewDateTime('');\r\n//            fetchData();\r\n//            alert('Appointment rescheduled successfully');\r\n//          }} style={{ ...buttonStyle, background: '#007bff', color: 'white' }}>Confirm</button>\r\n//          <button onClick={() => setRescheduleModal(false)} style={{ ...buttonStyle, background: '#ccc', color: 'black' }}>Cancel</button>\r\n//        </div>\r\n//      )}\r\n\r\n\r\n//       {showPendingRescheduleModal && (\r\n//         <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>\r\n//           <div style={{ background: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 6px rgba(0,0,0,0.1)', width: '400px' }}>\r\n//             <h3>Reschedule Pending Appointment</h3>\r\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//             <label>Date/Time:</label>\r\n//             <input type=\"datetime-local\" value={pendingRescheduleData.newRequestedDateTime} onChange={(e) => setPendingRescheduleData({ ...pendingRescheduleData, newRequestedDateTime: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <label>Reason:</label>\r\n//             <input type=\"text\" placeholder=\"Reason for reschedule\" value={pendingRescheduleData.reason} onChange={(e) => setPendingRescheduleData({ ...pendingRescheduleData, reason: e.target.value })} style={{ width: '100%', padding: '10px', margin: '10px 0', border: '1px solid #ccc', borderRadius: '4px' }} />\r\n//             <button onClick={submitPendingReschedule} style={{ ...buttonStyle, background: '#28a745', color: 'white', marginRight: '10px' }}>Reschedule</button>\r\n//             <button onClick={() => { setShowPendingRescheduleModal(false); setError(''); }} style={{ ...buttonStyle, background: '#6c757d', color: 'white' }}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AdminDashboard;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
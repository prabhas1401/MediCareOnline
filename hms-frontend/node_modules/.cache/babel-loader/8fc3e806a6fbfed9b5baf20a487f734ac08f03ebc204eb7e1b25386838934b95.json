{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tharu\\\\Downloads\\\\hms-frontend (3)\\\\src\\\\pages\\\\Doctor\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import api from '../../services/api';\n// import Chart from '../../components/Chart';\n// import Table from '../../components/Table';\n\n// const Dashboard = () => {\n//   const [stats, setStats] = useState({});\n//   const [chartData, setChartData] = useState({});\n\n//   useEffect(() => {\n//     api.get('/doctor/stats').then(res => {\n//       setStats(res.data);\n//       setChartData({\n//         labels: ['Appointments', 'Patients'],\n//         datasets: [{ label: 'Counts', data: [res.data.appointments, res.data.patients] }]\n//       });\n//     });\n//   }, []);\n\n//   return (\n//     <div>\n//       <h2>Doctor Dashboard</h2>\n//       <div className=\"card\">\n//         <Chart data={chartData} />\n//       </div>\n//       <div className=\"card\">\n//         <Table headers={['Metric', 'Value']} data={Object.entries(stats).map(([k, v]) => ({ metric: k, value: v }))} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useEffect, useState } from 'react';\n// import api from '../../services/api';\n// import Chart from '../../components/Chart';\n// import Table from '../../components/Table';\n\n// const Dashboard = () => {\n//   const [stats, setStats] = useState({});\n//   const [chartData, setChartData] = useState(null); // null initially\n\n//   useEffect(() => {\n//     const fetchStats = async () => {\n//       try {\n//         const res = await api.get('/doctor/stats');\n//         const data = res.data || {};\n//         setStats(data);\n\n//         // Ensure valid fallback values\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [data.appointments || 0, data.patients || 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       } catch (error) {\n//         console.error('Error fetching stats:', error);\n//         setStats({ appointments: 0, patients: 0 });\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [0, 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       }\n//     };\n//     fetchStats();\n//   }, []);\n\n//   // ðŸ©µ Prevent rendering before data is ready\n//   if (!chartData) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h2>Doctor Dashboard</h2>\n//       <div className=\"card\">\n//         <Chart data={chartData} />\n//       </div>\n//       <div className=\"card\">\n//         {stats && Object.keys(stats).length > 0 ? (\n//           <Table\n//             headers={['Metric', 'Value']}\n//             data={Object.entries(stats).map(([k, v]) => ({\n//               metric: k,\n//               value: v,\n//             }))}\n//           />\n//         ) : (\n//           <p>No statistics available.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useEffect, useState } from 'react';\n// import api from '../../services/api';\n// import { Bar } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// } from 'chart.js';\n\n// ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// const Dashboard = () => {\n//   const [stats, setStats] = useState({});\n//   const [chartData, setChartData] = useState(null); // initially null\n\n//   useEffect(() => {\n//     const fetchStats = async () => {\n//       try {\n//         const res = await api.get('/doctor/stats');\n//         const data = res.data || {};\n//         setStats(data);\n\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [data.appointments || 0, data.patients || 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       } catch (error) {\n//         console.error('Error fetching stats:', error);\n//         setStats({ appointments: 0, patients: 0 });\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [0, 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       }\n//     };\n\n//     fetchStats();\n//   }, []);\n\n//   if (!chartData) {\n//     return (\n//       <div style={styles.loadingContainer}>\n//         <p>Loading dashboard...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={styles.page}>\n//       <h2 style={styles.heading}>Doctor Dashboard</h2>\n\n//       {/* Chart Card */}\n//       <div style={styles.card}>\n//         <Bar data={chartData} options={{ responsive: true, plugins: { legend: { position: 'top' } } }} />\n//       </div>\n\n//       {/* Stats Table Card */}\n//       <div style={styles.card}>\n//         {stats && Object.keys(stats).length > 0 ? (\n//           <table style={styles.table}>\n//             <thead>\n//               <tr>\n//                 <th style={styles.th}>Metric</th>\n//                 <th style={styles.th}>Value</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {Object.entries(stats).map(([k, v]) => (\n//                 <tr key={k}>\n//                   <td style={styles.td}>{k}</td>\n//                   <td style={styles.td}>{v}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <p style={{ textAlign: 'center' }}>No statistics available.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// const styles = {\n//   page: {\n//     padding: 20,\n//     minHeight: '100vh',\n//     background: '#f4f7fa',\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\"\n//   },\n//   heading: {\n//     color: '#0077b6',\n//     marginBottom: 20,\n//     fontSize: '2rem',\n//     textAlign: 'center'\n//   },\n//   card: {\n//     background: '#fff',\n//     padding: 20,\n//     borderRadius: 10,\n//     marginBottom: 20,\n//     boxShadow: '0 4px 12px rgba(0,0,0,0.05)'\n//   },\n//   table: {\n//     width: '100%',\n//     borderCollapse: 'collapse',\n//     marginTop: 10\n//   },\n//   th: {\n//     padding: 12,\n//     background: '#0077b6',\n//     color: '#fff',\n//     textAlign: 'left',\n//     borderBottom: '1px solid #e0e0e0'\n//   },\n//   td: {\n//     padding: 12,\n//     borderBottom: '1px solid #e0e0e0'\n//   },\n//   loadingContainer: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     height: '60vh',\n//     fontSize: 18,\n//     color: '#0077b6'\n//   }\n// };\n\n// export default Dashboard;\nimport React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [stats, setStats] = useState({});\n  const [chartData, setChartData] = useState(null); // null initially\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const res = await api.get('/doctor/stats');\n        const data = res.data || {};\n        setStats(data);\n\n        // Safely create chart data\n        setChartData({\n          labels: ['Appointments', 'Patients'],\n          datasets: [{\n            label: 'Counts',\n            data: [typeof data.appointments === 'number' ? data.appointments : 0, typeof data.patients === 'number' ? data.patients : 0],\n            backgroundColor: ['#36A2EB', '#FF6384']\n          }]\n        });\n      } catch (error) {\n        console.error(error);\n        setStats({\n          appointments: 0,\n          patients: 0\n        });\n        setChartData({\n          labels: ['Appointments', 'Patients'],\n          datasets: [{\n            label: 'Counts',\n            data: [0, 0],\n            backgroundColor: ['#36A2EB', '#FF6384']\n          }]\n        });\n      }\n    };\n    fetchStats();\n  }, []);\n\n  // âœ… Only render chart if datasets exist\n  const isChartReady = chartData && Array.isArray(chartData.datasets) && chartData.datasets.length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20,\n      minHeight: '100vh',\n      background: '#f4f7fa'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: '#0077b6',\n        textAlign: 'center',\n        marginBottom: 20\n      },\n      children: \"Doctor Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#fff',\n        padding: 20,\n        borderRadius: 10,\n        marginBottom: 20,\n        boxShadow: '0 4px 12px rgba(0,0,0,0.05)'\n      },\n      children: isChartReady ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: 'Appointments vs Patients'\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#fff',\n        padding: 20,\n        borderRadius: 10,\n        boxShadow: '0 4px 12px rgba(0,0,0,0.05)'\n      },\n      children: stats && Object.keys(stats).length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                padding: 12,\n                background: '#0077b6',\n                color: '#fff'\n              },\n              children: \"Metric\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                padding: 12,\n                background: '#0077b6',\n                color: '#fff'\n              },\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(stats).map(([k, v]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: 12,\n                borderBottom: '1px solid #e0e0e0'\n              },\n              children: k\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: 12,\n                borderBottom: '1px solid #e0e0e0'\n              },\n              children: v\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 19\n            }, this)]\n          }, k, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"No statistics available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"lZ5QfXs944N9lgl6ve8ViNGkIuE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","api","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","stats","setStats","chartData","setChartData","fetchStats","res","get","data","labels","datasets","label","appointments","patients","backgroundColor","error","console","isChartReady","Array","isArray","length","style","padding","minHeight","background","children","color","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","borderRadius","boxShadow","options","responsive","plugins","legend","position","title","display","text","Object","keys","width","borderCollapse","entries","map","k","v","borderBottom","_c","$RefreshReg$"],"sources":["C:/Users/Tharu/Downloads/hms-frontend (3)/src/pages/Doctor/Dashboard.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import api from '../../services/api';\n// import Chart from '../../components/Chart';\n// import Table from '../../components/Table';\n\n// const Dashboard = () => {\n//   const [stats, setStats] = useState({});\n//   const [chartData, setChartData] = useState({});\n\n//   useEffect(() => {\n//     api.get('/doctor/stats').then(res => {\n//       setStats(res.data);\n//       setChartData({\n//         labels: ['Appointments', 'Patients'],\n//         datasets: [{ label: 'Counts', data: [res.data.appointments, res.data.patients] }]\n//       });\n//     });\n//   }, []);\n\n//   return (\n//     <div>\n//       <h2>Doctor Dashboard</h2>\n//       <div className=\"card\">\n//         <Chart data={chartData} />\n//       </div>\n//       <div className=\"card\">\n//         <Table headers={['Metric', 'Value']} data={Object.entries(stats).map(([k, v]) => ({ metric: k, value: v }))} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useEffect, useState } from 'react';\n// import api from '../../services/api';\n// import Chart from '../../components/Chart';\n// import Table from '../../components/Table';\n\n// const Dashboard = () => {\n//   const [stats, setStats] = useState({});\n//   const [chartData, setChartData] = useState(null); // null initially\n\n//   useEffect(() => {\n//     const fetchStats = async () => {\n//       try {\n//         const res = await api.get('/doctor/stats');\n//         const data = res.data || {};\n//         setStats(data);\n\n//         // Ensure valid fallback values\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [data.appointments || 0, data.patients || 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       } catch (error) {\n//         console.error('Error fetching stats:', error);\n//         setStats({ appointments: 0, patients: 0 });\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [0, 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       }\n//     };\n//     fetchStats();\n//   }, []);\n\n//   // ðŸ©µ Prevent rendering before data is ready\n//   if (!chartData) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h2>Doctor Dashboard</h2>\n//       <div className=\"card\">\n//         <Chart data={chartData} />\n//       </div>\n//       <div className=\"card\">\n//         {stats && Object.keys(stats).length > 0 ? (\n//           <Table\n//             headers={['Metric', 'Value']}\n//             data={Object.entries(stats).map(([k, v]) => ({\n//               metric: k,\n//               value: v,\n//             }))}\n//           />\n//         ) : (\n//           <p>No statistics available.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useEffect, useState } from 'react';\n// import api from '../../services/api';\n// import { Bar } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// } from 'chart.js';\n\n// ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// const Dashboard = () => {\n//   const [stats, setStats] = useState({});\n//   const [chartData, setChartData] = useState(null); // initially null\n\n//   useEffect(() => {\n//     const fetchStats = async () => {\n//       try {\n//         const res = await api.get('/doctor/stats');\n//         const data = res.data || {};\n//         setStats(data);\n\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [data.appointments || 0, data.patients || 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       } catch (error) {\n//         console.error('Error fetching stats:', error);\n//         setStats({ appointments: 0, patients: 0 });\n//         setChartData({\n//           labels: ['Appointments', 'Patients'],\n//           datasets: [\n//             {\n//               label: 'Counts',\n//               data: [0, 0],\n//               backgroundColor: ['#36A2EB', '#FF6384'],\n//             },\n//           ],\n//         });\n//       }\n//     };\n\n//     fetchStats();\n//   }, []);\n\n//   if (!chartData) {\n//     return (\n//       <div style={styles.loadingContainer}>\n//         <p>Loading dashboard...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={styles.page}>\n//       <h2 style={styles.heading}>Doctor Dashboard</h2>\n\n//       {/* Chart Card */}\n//       <div style={styles.card}>\n//         <Bar data={chartData} options={{ responsive: true, plugins: { legend: { position: 'top' } } }} />\n//       </div>\n\n//       {/* Stats Table Card */}\n//       <div style={styles.card}>\n//         {stats && Object.keys(stats).length > 0 ? (\n//           <table style={styles.table}>\n//             <thead>\n//               <tr>\n//                 <th style={styles.th}>Metric</th>\n//                 <th style={styles.th}>Value</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {Object.entries(stats).map(([k, v]) => (\n//                 <tr key={k}>\n//                   <td style={styles.td}>{k}</td>\n//                   <td style={styles.td}>{v}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <p style={{ textAlign: 'center' }}>No statistics available.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// const styles = {\n//   page: {\n//     padding: 20,\n//     minHeight: '100vh',\n//     background: '#f4f7fa',\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\"\n//   },\n//   heading: {\n//     color: '#0077b6',\n//     marginBottom: 20,\n//     fontSize: '2rem',\n//     textAlign: 'center'\n//   },\n//   card: {\n//     background: '#fff',\n//     padding: 20,\n//     borderRadius: 10,\n//     marginBottom: 20,\n//     boxShadow: '0 4px 12px rgba(0,0,0,0.05)'\n//   },\n//   table: {\n//     width: '100%',\n//     borderCollapse: 'collapse',\n//     marginTop: 10\n//   },\n//   th: {\n//     padding: 12,\n//     background: '#0077b6',\n//     color: '#fff',\n//     textAlign: 'left',\n//     borderBottom: '1px solid #e0e0e0'\n//   },\n//   td: {\n//     padding: 12,\n//     borderBottom: '1px solid #e0e0e0'\n//   },\n//   loadingContainer: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     height: '60vh',\n//     fontSize: 18,\n//     color: '#0077b6'\n//   }\n// };\n\n// export default Dashboard;\nimport React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst Dashboard = () => {\n  const [stats, setStats] = useState({});\n  const [chartData, setChartData] = useState(null); // null initially\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const res = await api.get('/doctor/stats');\n        const data = res.data || {};\n\n        setStats(data);\n\n        // Safely create chart data\n        setChartData({\n          labels: ['Appointments', 'Patients'],\n          datasets: [\n            {\n              label: 'Counts',\n              data: [\n                typeof data.appointments === 'number' ? data.appointments : 0,\n                typeof data.patients === 'number' ? data.patients : 0\n              ],\n              backgroundColor: ['#36A2EB', '#FF6384']\n            }\n          ]\n        });\n      } catch (error) {\n        console.error(error);\n        setStats({ appointments: 0, patients: 0 });\n        setChartData({\n          labels: ['Appointments', 'Patients'],\n          datasets: [\n            {\n              label: 'Counts',\n              data: [0, 0],\n              backgroundColor: ['#36A2EB', '#FF6384']\n            }\n          ]\n        });\n      }\n    };\n\n    fetchStats();\n  }, []);\n\n  // âœ… Only render chart if datasets exist\n  const isChartReady =\n    chartData &&\n    Array.isArray(chartData.datasets) &&\n    chartData.datasets.length > 0;\n\n  return (\n    <div style={{ padding: 20, minHeight: '100vh', background: '#f4f7fa' }}>\n      <h2 style={{ color: '#0077b6', textAlign: 'center', marginBottom: 20 }}>\n        Doctor Dashboard\n      </h2>\n\n      <div\n        style={{\n          background: '#fff',\n          padding: 20,\n          borderRadius: 10,\n          marginBottom: 20,\n          boxShadow: '0 4px 12px rgba(0,0,0,0.05)'\n        }}\n      >\n        {isChartReady ? (\n          <Bar\n            data={chartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: { position: 'top' },\n                title: { display: true, text: 'Appointments vs Patients' }\n              }\n            }}\n          />\n        ) : (\n          <p>Loading chart...</p>\n        )}\n      </div>\n\n      <div\n        style={{\n          background: '#fff',\n          padding: 20,\n          borderRadius: 10,\n          boxShadow: '0 4px 12px rgba(0,0,0,0.05)'\n        }}\n      >\n        {stats && Object.keys(stats).length > 0 ? (\n          <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n            <thead>\n              <tr>\n                <th style={{ padding: 12, background: '#0077b6', color: '#fff' }}>\n                  Metric\n                </th>\n                <th style={{ padding: 12, background: '#0077b6', color: '#fff' }}>\n                  Value\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(stats).map(([k, v]) => (\n                <tr key={k}>\n                  <td style={{ padding: 12, borderBottom: '1px solid #e0e0e0' }}>\n                    {k}\n                  </td>\n                  <td style={{ padding: 12, borderBottom: '1px solid #e0e0e0' }}>\n                    {v}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <p style={{ textAlign: 'center' }}>No statistics available.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
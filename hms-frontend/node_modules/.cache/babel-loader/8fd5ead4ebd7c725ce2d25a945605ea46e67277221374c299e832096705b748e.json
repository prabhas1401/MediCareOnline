{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api'\n});\napi.interceptors.request.use(config => {\n  try {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    if (loggedInUser !== null && loggedInUser !== void 0 && loggedInUser.token) {\n      config.headers.Authorization = `Bearer ${loggedInUser.token}`;\n    }\n  } catch (error) {\n    console.error('Error parsing loggedInUser from localStorage', error);\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","loggedInUser","JSON","parse","localStorage","getItem","token","headers","Authorization","error","console","Promise","reject"],"sources":["C:/Users/Tharu/Downloads/hms-frontend (3)/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n});\n\napi.interceptors.request.use(\n  (config) => {\n    try {\n      const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n      if (loggedInUser?.token) {\n        config.headers.Authorization = `Bearer ${loggedInUser.token}`;\n      }\n    } catch (error) {\n      console.error('Error parsing loggedInUser from localStorage', error);\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default api;\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,IAAI;IACF,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IACrE,IAAIJ,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEK,KAAK,EAAE;MACvBN,MAAM,CAACO,OAAO,CAACC,aAAa,GAAG,UAAUP,YAAY,CAACK,KAAK,EAAE;IAC/D;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;EACtE;EACA,OAAOT,MAAM;AACf,CAAC,EACAS,KAAK,IAAKE,OAAO,CAACC,MAAM,CAACH,KAAK,CACjC,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}